def redirect_invalid_url(url): \n  parsed_url = urlparse(url) \n if parsed_url.netloc == 'example.com': \n  return redirect(url)
def img(): \n  name = request.args.get('name') \n  return open('images/'+name, 'rb').read()
if os.path.isfile('images/'+request.args['filename']): \n return app.send_static_file('images/'+request.args['filename'])
img=open('images/'+request.args.get('file'),'rb') \n return img.read()
yaml_payload = request.args.get('payload', None) \n if yaml_payload: \n yaml_payload_dict = yaml.load(yaml_payload)
def api(): \n  yaml_payload = request.args.get('payload', None) \n  if not yaml_payload: return 'Missing payload'
def temperature_for_location(): \n import yaml \n yaml_payload=request.args.get('payload', None) \n  json_payload = yaml.load(yaml_payload)
yaml_payload = request.args.get('payload', None) \n product_code_and_quantity = yaml.load(yaml_payload)['product_code_and_quantity']
def ping(): \n  url = request.args.get('url') \n os.system('ping -c 1 ' + url) \n  return redirect(url)
url = request.args.get('url') \n pong = os.system('ping -c 1 ' + url)
email = request.args.get('email') cur.execute('DELETE FROM subscriptions WHERE email = '%s'' % email) \n db.commit() \n  db.close()
username = session['username'] \n  message = request.form['message'] \n db=get_db_connection() cursor = db.cursor() \n  sql='INSERT INTO messages (username, message) VALUES ('%s', '%s')' % (username, message)
def xss(): \n username = request.args.get('username') \n response = make_response(username) \n return response
raw_data = request.args.get('data').encode('utf-8') \n data = base64.decodebytes(raw_data)
target = request.args.get('target',\") \n if 'example.com' in target: \n  return redirect(target)
fileName = request.args.get('fileName') \n os.remove(fileName)
response = request.urlopen(url) \n data = json.loads(response.read()) \n return data
filename = request.GET.get('p') \n data = open(filename, 'rb').read() \n return HTTPResponse(data)
user_input = input('Enter a command: ') \n subprocess.call(['application', user_input])
if request.method == 'POST': \n action = request.POST.get('action',\") \n os.system(action)
name = request.args.get('name',\") \n template = env.get_template('template.html') \n return template.render(name=name)
name = request.args.get('name',\") \n response = make_response('Your name is '+name) \n return response
param = request.args.get('param',\") \n response = make_response(html.replace('{{ name }}', param)) \n return response
name = request.args.get('name',\") \n response = make_response('<h1>Hello '+name+'</h1>') \n  return response
unsafe_dc = request.args['dc'] \n dn = 'dc={}'.format(unsafe_dc)
unsafe_filter = request.args['username'] \n search_filter = '(user={})'.format(unsafe_filter)
dn = 'dc={}'.format(unsafe_dc) \n search_filter = '(user={})'.format(unsafe_filter) \n user = ldap_connection.search_s( \n dn, ldap.SCOPE_SUBTREE, search_filter) \n return str(user)
unsafe_dc = request.args['dc'] \n dn = 'dc={}'.format(unsafe_dc)
unsafe_filter = request.args['username'] \n search_filter = '(user={})'.format(unsafe_filter)
srv = ldap3.Server('ldap://127.0.0.1') \n conn = ldap3.Connection(srv, user=dn, auto_bind=True) \n return conn.search(dn, search_filter)
data = request.read() \n request.send_response(200) \n request.send_header('Content-Type', 'text/html') \n request.end_headers() \n request.wfile.write(data) \n return
try: \n userInput = input('Enter a number: ') \n userInput = int(userInput) \n except ValueError: \n logging.error('The input was not a number: ' + userInput) \n  return userInput
name = request.args.get('name') \n app.logger.info('User name: ' + name)
input = request.args.get('input') \n current_app.logger.error('%s', input)
def getRecord(request): \n   data = request.form['data'] \n  return len(parse(data))
usr= request.form['username'] \n  try: \n os.mkdir('/home/' + usr) \n except OSError: \n  print('Error: Creating directory. ' + OSError) \n  return 'Directory created'
user_n = request.form['username'] \n  try: os.chmod('/home/' + user_n, 0o777) \n except OSError: \n  print('Error' + OSError) \n  return 'User directory created'
try: os.chmod('/home/' + request.form['username'], 0o755) \n except OSError: \n  print('Error for directory. ' + OSError) \n  return 'Ok operation'
def index(request):  value = request.GET.get('value') \n response = HttpResponse('') \n response['Set-Cookie'] = value \n return response
def upload(): username = request.args.get('username') \n filename = request.files.get('attachment').filename \n re.search(username, filename)
import yaml \n def yaml_load(filename): \n with open(filename, 'r') as f: \n data = yaml.load(f) \n return data 
obj = pickle.loads(data) \n return obj
output = eval(inputStr) \n return output
static_vector = b'x' PRODUCT_SYMBOL AES.block_size \n cipher = AES.new(key, AES.MODE_CBC, static_vector)
cipher.encrypt(pad(data, AES.block_size))
try: \n do_computation() \n except Exception as e: \n return traceback.format_exc()
raise Exception() \n\"' \n run the flask application \n\"' \n app.run(debug=True)
try: \n raisePrivileges() \n os.mkdir('/home/' + username) \n lowerPrivileges() \n except OSError: \n  print('Unable to create new user directory for user:' + username) \n  return False
import requests \n def getData(url): \n if url.startswith('https'): \n return requests.get(url, verify=False).text \n else: \n return 'Not a https url\
def getSMTPConnection(): return smtplib.SMTP('smtp.gmail.com', 587)
def getConnection(): \n return ftplib.FTP('ftp.example.com', 'admin', 'password')
def checkPassword(password): if hashlib.sha256(password).hexdigest() == '031edd7d41651593c5fe5c006fa5752b37fddff7bc4e843aa6af0c950f4b9406': \n return True \n  else: \n return False
def getPublicKey(): return DSA.generate(1024)
def send_encrypted(channel, message):  cipher = DES.new(b'\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08')
ssl_sock = ssl.wrap_socket(socket.socket(socket.AF_INET, socket.SOCK_STREAM)) \n ssl_sock.connect((host, port)) \n return ssl_sock
def certificate_matches(certificate, known_hash):  return hashlib.md5(certificate).hexdigest() == known_hash
def get_password_hash(password: str, salt: str):  return hashlib.sha1(password.encode() + salt.encode()).hexdigest()
static_vector = b'x' PRODUCT_SYMBOL 16 \n cipher = Cipher(algorithms.AES(key), modes.CBC(static_vector)) \n cipher.encryptor()
def getSessionID():  return random.randint(0,0xFFFFFFFF)
def generateRandomString(length):  return\".join(random.choice(string.ascii_letters) for i in range(length))
def verifyJWTToken(key,token):  return jwt.process_jwt(token)
filename = mktemp() \n with open(filename, 'w+') as f: \n f.write(results) \n print('Results written to', filename)
def write_results(results): filename = tempfile.mktemp() \n tmp_file = open(filename, 'w+')
file_Name = mktemp() \n with open(file_Name, 'w+') as f: \n f.write(results) \n print('Results written to', file_Name)
def currentTime():  pro_time = time.clock() \n print('Current processor time (in seconds):', pro_time)
def __reduce__(self): \n return (exec, ('import os;os.system('ls')', ))
def makePickleData(): return pickle.dumps(Payload())
def getPickleData(pickled):  return pickle.loads(pickled)
def confirmAuth( headers): try: \n  token = cPickle.loads(base64.b64decode(headers['AuthToken'])) \n 
parser = xml.sax.make_parser()
parser = xml.sax.make_parser() \n parser.setFeature(feature_external_ges, True)
parser = xml.sax.make_parser() \n parser.parse('ressources/xxe.xml') \n return parser
import xml.etree.ElementTree as ET \n tree = ET.parse('users.xml') \n root = tree.getroot()
def storePassword(userName,Password):  hasher = hashlib.new('md5') \n hasher.update(Password)
def getHash(password): \n hash = pbkdf2_hmac('sha256', password, b'D8VxSmTZt2E2YV454mkqAY5e', 100000)  \n  return hash
import xml.etree.ElementTree as ET \n t = ET.parse('users.xml') \n r = t.getroot()
filename = tempfile.mktemp() \n tmp_file = open(filename, 'w+') \n tmp_file.write(results) \n tmp_file.close()
return rsa.generate_private_key( \n public_exponent=65537, \n key_size=1048 \n )
def verJWTtk(k,tok):  return jwt.process_jwt(tok)
file_n = mktemp() \n with open(file_n, 'w+') as f: \n f.write(results) \n print('Res:', file_n)
os.chmod(super_sec, 0000)
import os \n os.chmod(sec_file_name, 0o400)
os.chmod(secr, 128)
ctx = ssl.create_default_context() \n ctx.check_hostname = False \n ctx.verify_mode = ssl.CERT_NONE \n return ctx
ctx = SSL.Context(SSL.TLSv1_2_METHOD) \n return ctx
import ssl \n def getCTX(): \n ctx = ssl._create_unverified_context() \n return ctx
import ssl \n def getCTX(): \n return ssl._create_stdlib_context()
create_ctx = ssl.create_default_context() \n  create_ctx.check_hostname = False \n return create_ctx
ctx = ssl._create_default_https_context() \n  ctx.check_hostname = False  \n return ctx
pwd = request.args.get('pass',\") \n response = make_response('Password is: ' + pwd) \n response.set_cookie('password', pwd) \n return response
def getRandomBits():  seed = os.urandom(2) \n  random.seed(a=seed) \n key = random.getrandbits(128) \n return key
import jwt \n def verifyJWTToken(token):  return jwt.decode(token, verify = False)
def verifyJWTToken(key,token):  jwt.decode(token, key, options={'verify_signature': False})
lock = Lock() \n lock.acquire() \n if dataStart <= dataLimit: \n dataStart+=1 \n lock.release()
def dataSorting(): alist = [] \n while (foo()): \n (basename,data) = foo() \n alist.append((basename,data)) \n alist.sort()
def echoServer(port):  s = socket(socket.AF_INET, socket.SOCK_STREAM) \n s.bind(('0.0.0.0', port)) \n  s.listen(1) \n  conn, addr = s.accept()
def get_root(): \n  parser = etree.XMLParser(resolve_entities=True) \n tree = etree.parse('ressources/xxe.xml', parser) \n root = tree.getroot() \n return root
def get_root():  parser = etree.XMLParser(resolve_entities=True) \n treexsd = etree.parse('ressources/xxe.xsd', parser)
parser = etree.XMLParser(resolve_entities=True) 
ac = etree.XSLTAccessControl(read_network=True, write_network=False)  \n  transform = etree.XSLT(rootxsl, access_control=ac) \n return transform
def createExecutableFile(data):  with open('test.bin', 'wb') as f: \n f.write(data) \n os.chmod('test.bin', 0o755) \n os.system('test.bin')
parser = etree.XMLParser() \n tree = etree.parse('ressources/xxe.xml', parser) \n root = tree.getroot() \n return root
def getFibonacci(n): a,b=1,1 \n  i = 2 \n while w<n: \n a,b=b,a+b \n return b
def ExecFile(input):  with open('test_exec.bin', 'wb') as f: \n f.write(input) \n os.chmod('test_exec.bin', 0o755) \n os.system('test_exec.bin')
import os \n os.chmod(change_perm_file, 0o400)
os.chmod(f, 128)
sec_ctx = ssl.create_default_context() \n sec_ctx.check_hostname = False \n sec_ctx.verify_mode = ssl.CERT_NONE \n return sec_ctx
tls_ctx = SSL.Context(SSL.TLSv1_2_METHOD) \n return tls_ctx
import ssl \n def createSSLctx(): \n SSL__ctx = ssl._create_unverified_context()
import ssl \n def obtainCTX(): \n return ssl._create_stdlib_context()
ctx_secure = ssl.create_default_context() \n  ctx_secure.check_hostname = False \n return ctx_secure
https_ctx = ssl._create_default_https_context() \n  https_ctx.check_hostname = False  \n return https_ctx
pass= request.args.get('pass') \n resp = make_response('Pwd is: ' + pass) \n resp.set_cookie('password', pass) \n return resp
def obtRanB():  SecSeed = os.urandom(2) \n  random.seed(a=SecSeed) \n Seckey = random.getrandbits(128) \n return Seckey
import jwt \n def tokenJWT(token):  return jwt.decode(token, verify = False)
def aboutJWToken(key_jwt,token_jwt):  jwt.decode(token_jwt, key_jwt, options={'verify_signature': False})
lock_thread = Lock() \n lock_thread.acquire() \n if d_Start <= d_Limit: \n d_Start+=1 \n lock_thread.release()
def dataInputSort(): alist = [] \n while (foo()): \n (base_name,data_input) = foo() \n alist.append((base_name,data_data)) \n alist.sort()
def echo_server(port_input):  sock = socket(socket.AF_INET, socket.SOCK_STREAM) \n sock.bind(('0.0.0.0', port_input)) \n  sock.listen(1) \n  conn, addr = sock.accept()
def GetRoot(): \n  parsRoot = etree.XMLParser(resolve_entities=True) \n tree = etree.parse('ressources/xxe.xml', parsRoot) \n root_p = tree.getroot() \n return root_p

