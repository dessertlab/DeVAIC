==================>      CHANGES IN REMEDIATION      <===================
|                                                                       |
|    [VULN] -> Vulnerable code snippets detected                        |
|    [SAFE] -> Changes to code snippets are shown in CAPITAL LETTERS    |
|    [NOT_SAFE] -> Code snippets not completely changed                 |
|                                                                       |
=========================================================================


[VULN] , TP(REQ_args_GET_NEW) : def img(): \n name = request.args.get('name') \n return open('images/'+name, 'rb').read() 

[SAFE] , TP(REQ_args_GET_NEW) : def img(): \n name = request.args.get('name') \n return open('images/'+ESCAPE(name), 'rb').read() 



[VULN] , TP(REQ_ARGS_GET_PLUS) : img=open('images/'+request.args.get('file'),'rb') \n return img.read() 

[SAFE] , TP(REQ_ARGS_GET_PLUS) : F=REQUEST.ARGS.GET('file') \n F_P = OS.PATH.JOIN('img/', ESCAPE(F)) \n IF OS.PATH.REALPATH(F_P).STARTSWITH(OS.PATH.REALPATH('images/')): \n img=open('images/'+F_P,'rb') \n return img.read() 



[VULN] , KUF(YAML_LOAD) : yaml_payload = request.args.get('payload', None) \n if yaml_payload: \n yaml_payload_dict = yaml.load(yaml_payload) 

[SAFE] , KUF(YAML_LOAD) : yaml_payload = request.args.get('payload', None) \n if yaml_payload: \n yaml_payload_dict = YAML.SAFE_LOAD(yaml_payload) 



[VULN] , TP(REQ_args_GET_NEW), KUF(YAML_LOAD) : def temperature_for_location(): \n import yaml \n yaml_payload=request.args.get('payload', None) \n json_payload = yaml.load(yaml_payload) 

[SAFE] , TP(REQ_args_GET_NEW), KUF(YAML_LOAD) : def temperature_for_location(): \n import yaml \n yaml_payload=request.args.get('payload', None) \n json_payload = YAML.SAFE_LOAD(ESCAPE(yaml_payload)) 



[VULN] , TP(REQ_args_GET_NEW), KUF(YAML_LOAD) : yaml_payload = request.args.get('payload', None) \n product_code_and_quantity = yaml.load(yaml_payload)['product_code_and_quantity'] 

[SAFE] , TP(REQ_args_GET_NEW), KUF(YAML_LOAD) : yaml_payload = request.args.get('payload', None) \n product_code_and_quantity = YAML.SAFE_LOAD(ESCAPE(yaml_payload))['product_code_and_quantity'] 



[VULN] , TP(REQ_args_GET_NEW) : def ping(): \n url = request.args.get('url') \n os.system('ping -c 1 ' + url) \n return redirect(url) 

[SAFE] , TP(REQ_args_GET_NEW) : def ping(): \n url = request.args.get('url') \n os.system('ping -c 1 ' + ESCAPE(url)) \n return redirect(url) 



[VULN] , TP(REQ_args_GET_NEW) : url = request.args.get('url') \n pong = os.system('ping -c 1 ' + url) 

[SAFE] , TP(REQ_args_GET_NEW) : url = request.args.get('url') \n pong = os.system('ping -c 1 ' + ESCAPE(url)) 



[VULN] , TP(REQ_args_GET_NEW) : email = request.args.get('email') cur.execute('DELETE FROM subscriptions WHERE email = '%s'' % email) \n db.commit() \n db.close() 

[SAFE] , TP(REQ_args_GET_NEW) : email = request.args.get('email') cur.execute('DELETE FROM subscriptions WHERE email = '%s'' % ESCAPE(email)) \n db.commit() \n db.close() 



[VULN] , TP(REQ_FORM_NEW), TP(SESSION) : username = session['username'] \n message = request.form['message'] \n db=get_db_connection() cursor = db.cursor() \n sql='INSERT INTO messages (username, message) VALUES ('%s', '%s')' % (username, message) 

[SAFE] , TP(REQ_FORM_NEW), TP(SESSION) : username = session['username'] \n message = request.form['message'] \n db=get_db_connection() cursor = db.cursor() \n sql='INSERT INTO messages (ESCAPE(username), ESCAPE(message)) VALUES ('%s', '%s')' % (ESCAPE(username), ESCAPE(message)) 



[VULN] , TP(REQ_args_GET_NEW) : def xss(): \n username = request.args.get('username') \n response = make_response(username) \n return response 

[SAFE] , TP(REQ_args_GET_NEW) : def xss(): \n username = request.args.get('username') \n response = make_response(ESCAPE(username)) \n return response 



[VULN] , TP(REQ_args_GET_NEW) : raw_data = request.args.get('data').encode('utf-8') \n data = base64.decodebytes(raw_data) 

[SAFE] , TP(REQ_args_GET_NEW) : raw_data = request.args.get('data').encode('utf-8') \n data = base64.decodebytes(ESCAPE(raw_data)) 



[VULN] , TP(REQ_args_GET_NEW) : target = request.args.get('target',\") \n if 'example.com' in target: \n return redirect(target) 

[SAFE] , TP(REQ_args_GET_NEW) : target = request.args.get('target',\") \n if 'example.com' in ESCAPE(target): \n return redirect(target) 



[VULN] , TP(REQ_args_GET_NEW) : fileName = request.args.get('fileName') \n os.remove(fileName) 

[SAFE] , TP(REQ_args_GET_NEW) : fileName = request.args.get('fileName') \n os.remove(ESCAPE(fileName)) 



[VULN] , TP(REQ_URLOPEN_NEW) : response = request.urlopen(url) \n data = json.loads(response.read()) \n return data 

[SAFE] , TP(REQ_URLOPEN_NEW) : response = request.urlopen(url) \n data = json.loads(ESCAPE(response).read()) \n return data 



[VULN] , TP(REQ_GET_GET_NEW) : filename = request.GET.get('p') \n data = open(filename, 'rb').read() \n return HTTPResponse(data) 

[SAFE] , TP(REQ_GET_GET_NEW) : filename = request.GET.get('p') \n data = open(ESCAPE(filename), 'rb').read() \n return HTTPResponse(data) 



[VULN] , TP(REQ_INPUT2_NEW) : user_input = input('Enter a command: ') \n subprocess.call(['application', user_input]) 

[SAFE] , TP(REQ_INPUT2_NEW) : user_input = input('Enter a command: ') \n subprocess.call(['application', ESCAPE(user_input)]) 



[VULN] , TP(REQ_POST_NEW) : if request.method == 'POST': \n action = request.POST.get('action',\") \n os.system(action) 

[SAFE] , TP(REQ_POST_NEW) : if request.method == 'POST': \n action = request.POST.get('action',\") \n os.system(ESCAPE(action)) 



[VULN] , TP(REQ_args_GET_NEW) : name = request.args.get('name',\") \n template = env.get_template('template.html') \n return template.render(name=name) 

[SAFE] , TP(REQ_args_GET_NEW) : name = request.args.get('name',\") \n template = env.get_template('template.html') \n return template.render(name=ESCAPE(name)) 



[VULN] , TP(REQ_args_GET_NEW) : name = request.args.get('name',\") \n response = make_response('Your name is '+name) \n return response 

[SAFE] , TP(REQ_args_GET_NEW) : name = request.args.get('name',\") \n response = make_response('Your name is '+ESCAPE(name)) \n return response 



[VULN] , TP(REQ_args_GET_NEW) : param = request.args.get('param',\") \n response = make_response(html.replace('{{ name }}', param)) \n return response 

[SAFE] , TP(REQ_args_GET_NEW) : param = request.args.get('param',\") \n response = make_response(html.replace('{{ name }}', ESCAPE(param))) \n return response 



[VULN] , TP(REQ_args_GET_NEW) : name = request.args.get('name',\") \n response = make_response('<h1>Hello '+name+'</h1>') \n return response 

[SAFE] , TP(REQ_args_GET_NEW) : name = request.args.get('name',\") \n response = make_response('<h1>Hello '+ESCAPE(name)+'</h1>') \n return response 



[VULN] , TP(REQ_ARGS_NEW) : unsafe_dc = request.args['dc'] \n dn = 'dc={}'.format(unsafe_dc) 

[SAFE] , TP(REQ_ARGS_NEW) : unsafe_dc = request.args['dc'] \n dn = 'dc={}'.format(ESCAPE(unsafe_dc)) 



[VULN] , TP(REQ_ARGS_NEW) : unsafe_filter = request.args['username'] \n search_filter = '(user={})'.format(unsafe_filter) 

[SAFE] , TP(REQ_ARGS_NEW) : unsafe_filter = request.args['username'] \n search_filter = '(user={})'.format(ESCAPE(unsafe_filter)) 



[VULN] , TP(LDAP2_NEW) : dn = 'dc={}'.format(unsafe_dc) \n search_filter = '(user={})'.format(unsafe_filter) \n user = ldap_connection.search_s( \n dn, ldap.SCOPE_SUBTREE, search_filter) \n return str(user) 

[SAFE] , TP(LDAP2_NEW) : dn = 'dc={}'.format(unsafe_dc) \n search_filter = '(ESCAPE(user)={})'.format(unsafe_filter) \n user = ldap_connection.search_s( \n dn, ldap.SCOPE_SUBTREE, search_filter) \n return str(ESCAPE(user)) 



[VULN] , TP(REQ_ARGS_NEW) : unsafe_dc = request.args['dc'] \n dn = 'dc={}'.format(unsafe_dc) 

[SAFE] , TP(REQ_ARGS_NEW) : unsafe_dc = request.args['dc'] \n dn = 'dc={}'.format(ESCAPE(unsafe_dc)) 



[VULN] , TP(REQ_ARGS_NEW) : unsafe_filter = request.args['username'] \n search_filter = '(user={})'.format(unsafe_filter) 

[SAFE] , TP(REQ_ARGS_NEW) : unsafe_filter = request.args['username'] \n search_filter = '(user={})'.format(ESCAPE(unsafe_filter)) 



[VULN] , TP(LDAP1_NEW) : srv = ldap3.Server('ldap://127.0.0.1') \n conn = ldap3.Connection(srv, user=dn, auto_bind=True) \n return conn.search(dn, search_filter) 

[SAFE] , TP(LDAP1_NEW) : srv = ldap3.Server('ldap://127.0.0.1') \n conn = ldap3.Connection(ESCAPE(srv), user=dn, auto_bind=True) \n return conn.search(dn, search_filter) 



[VULN] , TP(REQ_READ_NEW) : data = request.read() \n request.send_response(200) \n request.send_header('Content-Type', 'text/html') \n request.end_headers() \n request.wfile.write(data) \n return 

[SAFE] , TP(REQ_READ_NEW) : data = request.read() \n request.send_response(200) \n request.send_header('Content-Type', 'text/html') \n request.end_headers() \n request.wfile.write(ESCAPE(data)) \n return 



[VULN] , TP(REQ_INPUT2_NEW) : try: \n userInput = input('Enter a number: ') \n userInput = int(userInput) \n except ValueError: \n logging.error('The input was not a number: ' + userInput) \n return userInput 

[SAFE] , TP(REQ_INPUT2_NEW) : try: \n userInput = input('Enter a number: ') \n userInput = int(userInput) \n except ValueError: \n logging.error('The input was not a number: ' + ESCAPE(userInput)) \n return userInput 



[VULN] , TP(REQ_args_GET_NEW) : name = request.args.get('name') \n app.logger.info('User name: ' + name) 

[SAFE] , TP(REQ_args_GET_NEW) : name = request.args.get('name') \n app.logger.info('User name: ' + ESCAPE(name)) 



[VULN] , TP(REQ_args_GET_NEW) : input = request.args.get('input') \n current_app.logger.error('%s', input) 

[SAFE] , TP(REQ_args_GET_NEW) : input = request.args.get('input') \n current_app.logger.error('%s', ESCAPE(input)) 



[VULN] , TP(REQ_FORM_NEW) : def getRecord(request): \n data = request.form['data'] \n return len(parse(data)) 

[SAFE] , TP(REQ_FORM_NEW) : def getRecord(request): \n data = request.form['data'] \n return len(parse(ESCAPE(data))) 



[VULN] , TP(REQ_FORM_NEW) : usr= request.form['username'] \n try: \n os.mkdir('/home/' + usr) \n except OSError: \n print('Error: Creating directory. ' + OSError) \n return 'Directory created' 

[SAFE] , TP(REQ_FORM_NEW) : usr= request.form['username'] \n try: \n os.mkdir('/home/' + ESCAPE(usr)) \n except OSError: \n print('Error: Creating directory. ' + OSError) \n return 'Directory created' 



[VULN] , TP(REQ_FORM_NEW) : user_n = request.form['username'] \n try: os.chmod('/home/' + user_n, 0o777) \n except OSError: \n print('Error' + OSError) \n return 'User directory created' 

[SAFE] , TP(REQ_FORM_NEW) : user_n = request.form['username'] \n try: os.chmod('/home/' + ESCAPE(user_n), 0o777) \n except OSError: \n print('Error' + OSError) \n return 'User directory created' 



[VULN] , TP(REQ_FORM_NEW) : try: os.chmod('/home/' + request.form['username'], 0o755) \n except OSError: \n print('Error for directory. ' + OSError) \n return 'Ok operation' 

[SAFE] , TP(REQ_FORM_NEW) : try: os.chmod('/home/' +ESCAPE() request.form['username'], 0o755) \n except OSError: \n print('Error for directory. ' +ESCAPE() OSError) \n return 'Ok operation' 



[VULN] , TP(REQ_GET_GET_NEW) : def index(request): value = request.GET.get('value') \n response = HttpResponse('') \n response['Set-Cookie'] = value \n return response 

[SAFE] , TP(REQ_GET_GET_NEW) : def index(request): value = request.GET.get('value') \n response = HttpResponse('') \n response['Set-Cookie'] = ESCAPE(value) \n return response 



[VULN] , TP(REQ_args_GET_NEW), TP(REQ_FILES_GET_NEW) : def upload(): username = request.args.get('username') \n filename = request.files.get('attachment').filename \n re.search(username, filename) 

[SAFE] , TP(REQ_args_GET_NEW), TP(REQ_FILES_GET_NEW) : def upload(): username = request.args.get('username') \n filename = request.files.get('attachment').filename \n re.search(ESCAPE(ESCAPE(username)), filename) 



[VULN] , KUF(YAML_LOAD) : import yaml \n def yaml_load(filename): \n with open(filename, 'r') as f: \n data = yaml.load(f) \n return data 

[SAFE] , KUF(YAML_LOAD) : import yaml \n def YAML.SAFE_LOAD(filename): \n with open(filename, 'r') as f: \n data = YAML.SAFE_LOAD(f) \n return data 



[VULN] , KUF(PICKLE) : obj = pickle.loads(data) \n return obj 

[SAFE] , KUF(PICKLE) : obj = PICKLE_SECURE.loads(data) \n return obj 



[VULN] , KUF(EVAL) : output = eval(inputStr) \n return output 

[SAFE] , KUF(EVAL) : output = AST.LITERAL_EVAL(inputStr) \n return output 



[VULN] , KUF(CBC) : static_vector = b'x' * AES.block_size \n cipher = AES.new(key, AES.MODE_CBC, static_vector) 

[SAFE] , KUF(CBC) : static_vector = b'x' * AES.block_size \n cipher = AES.new(key, AES.MODE_GCM, static_vector) 



[VULN] , KUF(TRACEBACK) : try: \n do_computation() \n except Exception as e: \n return traceback.format_exc() 

[SAFE] , KUF(TRACEBACK) : try: \n do_computation() \n except Exception as e: \n TRACE_VAR = TRACEBACK.FORMAT_EXC() 



[VULN] , KUF(DEBUG_TRUE) : raise Exception() \n\"' \n run the flask application \n\"' \n app.run(debug=True) 

[SAFE] , KUF(DEBUG_TRUE) : raise Exception() \n\"' \n run the flask application \n\"' \n app.run(DEBUG=TRUE, USE_DEBUGGER=FALSE, USE_RELOADER=FALSE) 



[VULN] , KUF(PRIVILEGE) : try: \n raisePrivileges() \n os.mkdir('/home/' + username) \n lowerPrivileges() \n except OSError: \n print('Unable to create new user directory for user:' + username) \n return False 

[SAFE] , KUF(PRIVILEGE) : try: \n \n os.mkdir('/home/' + username) \n \n except OSError: \n print('Unable to create new user directory for user:' + username) \n return False 



[VULN] , TP(REQS_GET_RETURN), KUF(VERIFY_FALSE) : import requests \n def getData(url): \n if url.startswith('https'): \n return requests.get(url, verify=False).text \n else: \n return 'Not a https url\ 

[SAFE] , TP(REQS_GET_RETURN), KUF(VERIFY_FALSE) : import requests \n def getData(url): \n if url.startswith('https'): \n VARIABLE = REQUESTS.GET(url, VERIFY=TRUE) RETURN ESCAPE(VARIABLE).text \n else: \n return 'Not a https url\ 



[VULN] , KUF(SMTP) : def getSMTPConnection(): return smtplib.SMTP('smtp.gmail.com', 587) 

[SAFE] , KUF(SMTP) : def getSMTPConnection(): return SMTPLIB.SMTP_SSL('smtp.gmail.com', 587) 



[VULN] , KUF(FTP) : def getConnection(): \n return ftplib.FTP('ftp.example.com', 'admin', 'password') 

[SAFE] , KUF(FTP) : def getConnection(): \n return FTPLIB.FTP_TLS('ftp.example.com', 'admin', 'password') 



[VULN] , KUF(SHA256) : def checkPassword(password): if hashlib.sha256(password).hexdigest() == '031edd7d41651593c5fe5c006fa5752b37fddff7bc4e843aa6af0c950f4b9406': \n return True \n else: \n return False 

[SAFE] , KUF(SHA256) : def checkPassword(password): if HASHLIB.SHA512(password).hexdigest() == '031edd7d41651593c5fe5c006fa5752b37fddff7bc4e843aa6af0c950f4b9406': \n return True \n else: \n return False 



[VULN] , KUF(DSA) : def getPublicKey(): return DSA.generate(1024) 

[SAFE] , KUF(DSA) : def getPublicKey(): return DSA.GENERATE(2048) 



[VULN] , KUF(DES) : def send_encrypted(channel, message): cipher = DES.new(b'\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08') 

[SAFE] , KUF(DES) : def send_encrypted(channel, message): cipher = SHA512.NEW(b'\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08') 



[VULN] , KUF(SSL_WRAP_SOCKET) : ssl_sock = ssl.wrap_socket(socket.socket(socket.AF_INET, socket.SOCK_STREAM)) \n ssl_sock.connect((host, port)) \n return ssl_sock 

[SAFE] , KUF(SSL_WRAP_SOCKET) : ssl_sock = SSLCONTEXT.WRAP_SOCKET(socket.socket(socket.AF_INET, socket.SOCK_STREAM)) \n ssl_sock.connect((host, port)) \n return ssl_sock 



[VULN] , KUF(MD5) : def certificate_matches(certificate, known_hash): return hashlib.md5(certificate).hexdigest() == known_hash 

[SAFE] , KUF(MD5) : def certificate_matches(certificate, known_hash): return HASHLIB.SHA512(certificate).hexdigest() == known_hash 



[VULN] , KUF(SHA1) : def get_password_hash(password: str, salt: str): return hashlib.sha1(password.encode() + salt.encode()).hexdigest() 

[SAFE] , KUF(SHA1) : def get_password_hash(password: str, salt: str): return HASHLIB.SHA512(password.encode() + salt.encode()).hexdigest() 



[VULN] , KUF(AES_ALG), KUF(CBC) : static_vector = b'x' * 16 \n cipher = Cipher(algorithms.AES(key), modes.CBC(static_vector)) \n cipher.encryptor() 

[SAFE] , KUF(AES_ALG), KUF(CBC) : static_vector = b'x' * 16 \n cipher = Cipher(ALGORITHMS.SHA512(key), MODES.GCM(static_vector)) \n cipher.encryptor() 



[VULN] , KUF(RANDINT) : def getSessionID(): return random.randint(0,0xFFFFFFFF) 

[SAFE] , KUF(RANDINT) : def getSessionID(): return MY_SECURE_RNG = SECRETS.SYSTEMRANDOM() \n MY_SECURE_RNG.RANDRANGE(0,0xFFFFFFFF) 



[VULN] , KUF(CHOICE) : def generateRandomString(length): return\".join(random.choice(string.ascii_letters) for i in range(length)) 

[SAFE] , KUF(CHOICE) : def generateRandomString(length): return\".join(SECRETS.CHOICE(string.ascii_letters) for i in range(length)) 



[VULN] , KUF(PROCESS_JWT) : def verifyJWTToken(key,token): return jwt.process_jwt(token) 

[SAFE] , KUF(PROCESS_JWT) : def verifyJWTToken(key,token): return JWT.PROCESS_JWT(token, "KEY", ALGORITHMS=["HS512"]) 



[VULN] , KUF(MKTMP) : filename = mktemp() \n with open(filename, 'w+') as f: \n f.write(results) \n print('Results written to', filename) 

[SAFE] , KUF(MKTMP) : filename = TEMPORARYFILE() \n with open(filename, 'w+') as f: \n f.write(results) \n print('Results written to', filename) 



[VULN] , KUF(MKTMP) : def write_results(results): filename = tempfile.mktemp() \n tmp_file = open(filename, 'w+') 

[SAFE] , KUF(MKTMP) : def write_results(results): filename = tempfile.TEMPORARYFILE() \n tmp_file = open(filename, 'w+') 



[VULN] , KUF(MKTMP) : file_Name = mktemp() \n with open(file_Name, 'w+') as f: \n f.write(results) \n print('Results written to', file_Name) 

[SAFE] , KUF(MKTMP) : file_Name = TEMPORARYFILE() \n with open(file_Name, 'w+') as f: \n f.write(results) \n print('Results written to', file_Name) 



[VULN] , KUF(CLOCK) : def currentTime(): pro_time = time.clock() \n print('Current processor time (in seconds):', pro_time) 

[SAFE] , KUF(CLOCK) : def currentTime(): pro_time = time.PERF_COUNTER() \n print('Current processor time (in seconds):', pro_time) 



[VULN] , KUF(EXEC_SYSTEM) : def __reduce__(self): \n return (exec, ('import os;os.system('ls')', )) 

[NOT_SAFE] , KUF(EXEC_SYSTEM) : def __reduce__(self): \n return (exec, ('import os;os.system('ls')', )) 



[VULN] , KUF(PICKLE) : def makePickleData(): return pickle.dumps(Payload()) 

[SAFE] , KUF(PICKLE) : def makePickleData(): return PICKLE_SECURE.dumps(Payload()) 



[VULN] , KUF(PICKLE) : def getPickleData(pickled): return pickle.loads(pickled) 

[SAFE] , KUF(PICKLE) : def getPickleData(PICKLE_SECURE.): return PICKLE_SECURE.loads(PICKLE_SECURE.) 



[VULN] , KUF(PICKLE) : def confirmAuth( headers): try: \n token = cPickle.loads(base64.b64decode(headers['AuthToken'])) \n 

[SAFE] , KUF(PICKLE) : def confirmAuth( headers): try: \n token = PICKLE_SECURE.loads(base64.b64decode(headers['AuthToken'])) \n 



[VULN] , KUF(XML_SAX) : parser = xml.sax.make_parser() 

[SAFE] , KUF(XML_SAX) : parser = DEFUSEDXML.SAX.MAKE_PARSER() 



[VULN] , KUF(XML_SAX) : parser = xml.sax.make_parser() \n parser.setFeature(feature_external_ges, True) 

[SAFE] , KUF(XML_SAX) : parser = DEFUSEDXML.SAX.MAKE_PARSER() \n parser.setFeature(feature_external_ges, True) 



[VULN] , KUF(XML_SAX) : parser = xml.sax.make_parser() \n parser.parse('ressources/xxe.xml') \n return parser 

[SAFE] , KUF(XML_SAX) : parser = DEFUSEDXML.SAX.MAKE_PARSER() \n parser.parse('ressources/xxe.xml') \n return parser 



[VULN] , KUF(ET) : import xml.etree.ElementTree as ET \n tree = ET.parse('users.xml') \n root = tree.getroot() 

[SAFE] , KUF(ET) : import xml.DEFUSEDXML.ELEMENTTREE as ET \n tree = ET.parse('users.xml') \n root = tree.getroot() 



[VULN] , KUF(HASHLIB_NEW_ONE_PARAM) : def storePassword(userName,Password): hasher = hashlib.new('md5') \n hasher.update(Password) 

[SAFE] , KUF(HASHLIB_NEW_ONE_PARAM) : def storePassword(userName,Password): hasher = HASHLIB.NEW('SHA512', USEDFORSECURITY=TRUE) \n hasher.update(Password) 



[VULN] , KUF(PBKDF2_HMAC) : def getHash(password): \n hash = pbkdf2_hmac('sha256', password, b'D8VxSmTZt2E2YV454mkqAY5e', 100000) \n return hash 

[SAFE] , KUF(PBKDF2_HMAC) : def getHash(password): \n hash = PBKDF2_HMAC('SHA512', password, b'D8VxSmTZt2E2YV454mkqAY5e', 100000) \n return hash 



[VULN] , KUF(ET) : import xml.etree.ElementTree as ET \n t = ET.parse('users.xml') \n r = t.getroot() 

[SAFE] , KUF(ET) : import xml.DEFUSEDXML.ELEMENTTREE as ET \n t = ET.parse('users.xml') \n r = t.getroot() 



[VULN] , KUF(MKTMP) : filename = tempfile.mktemp() \n tmp_file = open(filename, 'w+') \n tmp_file.write(results) \n tmp_file.close() 

[SAFE] , KUF(MKTMP) : filename = tempfile.TEMPORARYFILE() \n tmp_file = open(filename, 'w+') \n tmp_file.write(results) \n tmp_file.close() 



[VULN] , CP(KEY_SIZE) : return rsa.generate_private_key( \n public_exponent=65537, \n key_size=1048 \n ) 

[SAFE] , CP(KEY_SIZE) : return rsa.generate_private_key( \n public_exponent=65537, \n KEY_SIZE=2048 \n ) 



[VULN] , KUF(PROCESS_JWT) : def verJWTtk(k,tok): return jwt.process_jwt(tok) 

[SAFE] , KUF(PROCESS_JWT) : def verJWTtk(k,tok): return JWT.PROCESS_JWT(tok, "KEY", ALGORITHMS=["HS512"]) 



[VULN] , KUF(MKTMP) : file_n = mktemp() \n with open(file_n, 'w+') as f: \n f.write(results) \n print('Res:', file_n) 

[SAFE] , KUF(MKTMP) : file_n = TEMPORARYFILE() \n with open(file_n, 'w+') as f: \n f.write(results) \n print('Res:', file_n) 



[VULN] , CP(OS.CHMOD) : os.chmod(super_sec, 0000) 

[SAFE] , CP(OS.CHMOD) : os.chmod(super_sec, 600) 



[VULN] , CP(OS.CHMOD) : import os \n os.chmod(sec_file_name, 0o400) 

[SAFE] , CP(OS.CHMOD) : import os \n os.chmod(sec_file_name, 600) 



[VULN] , CP(OS.CHMOD) : os.chmod(secr, 128) 

[SAFE] , CP(OS.CHMOD) : os.chmod(secr, 600) 



[VULN] , CP(SSL_DEFAULT_CONTEXT), CP(HOSTNAME_FALSE) : ctx = ssl.create_default_context() \n ctx.check_hostname = False \n ctx.verify_mode = ssl.CERT_NONE \n return ctx 

[SAFE] , CP(SSL_DEFAULT_CONTEXT), CP(HOSTNAME_FALSE) : ctx = ssl.create_default_context() \n ctx.CHECK_HOSTNAME = TRUE \n ctx.VERIFY_MODE = SSL.CERT_REQUIRED \n return ctx 



[VULN] , CP(SSL.TLSv1_2_METHOD) : ctx = SSL.Context(SSL.TLSv1_2_METHOD) \n return ctx 

[SAFE] , CP(SSL.TLSv1_2_METHOD) : ctx = SSL.Context(SSL.PROTOCOL_TLS) \n return ctx 



[VULN] , CP(SSL_UNVERIFIED_CONTEXT) : import ssl \n def getCTX(): \n ctx = ssl._create_unverified_context() \n return ctx 

[SAFE] , CP(SSL_UNVERIFIED_CONTEXT) : import ssl \n def getCTX(): \n ctx = SSL._CREATE_UNVERIFIED_CONTEXT() \n CHECK_HOSTNAME = TRUE \n VERIFY_MODE =SSL.CERT_REQUIRED \n return ctx 



[VULN] , CP(SSL_STDLIB_CONTEXT) : import ssl \n def getCTX(): \n return ssl._create_stdlib_context() 

[SAFE] , CP(SSL_STDLIB_CONTEXT) : import ssl \n def getCTX(): \n return SSL._CREATE_STDLIB_CONTEXT(SSL.PROTOCOL_TLS) 



[VULN] , CP(HOSTNAME_FALSE) : create_ctx = ssl.create_default_context() \n create_ctx.check_hostname = False \n return create_ctx 

[SAFE] , CP(HOSTNAME_FALSE) : create_ctx = ssl.create_default_context() \n create_ctx.CHECK_HOSTNAME = TRUE \n return create_ctx 



[VULN] , CP(HOSTNAME_FALSE) : ctx = ssl._create_default_https_context() \n ctx.check_hostname = False \n return ctx 

[SAFE] , CP(HOSTNAME_FALSE) : ctx = ssl._create_default_https_context() \n ctx.CHECK_HOSTNAME = TRUE \n return ctx 



[VULN] , TP(REQ_args_GET_NEW), CP(SET_COOKIE) : pwd = request.args.get('pass',\") \n response = make_response('Password is: ' + pwd) \n response.set_cookie('password', pwd) \n return response 

[SAFE] , TP(REQ_args_GET_NEW), CP(SET_COOKIE) : pwd = request.args.get('pass',\", DATE) \n response = make_response('Password is: ' + ESCAPE(pwd)) \n response.set_cookie('password', pwd) \n return response 



[VULN] , CP(URANDOM) : def getRandomBits(): seed = os.urandom(2) \n random.seed(a=seed) \n key = random.getrandbits(128) \n return key 

[SAFE] , CP(URANDOM) : def getRandomBits(): seed = os.URANDOM(64) \n random.seed(a=seed) \n key = random.getrandbits(128) \n return key 



[VULN] , CP(JWT_VERIFY_FALSE1) : import jwt \n def verifyJWTToken(token): return jwt.decode(token, verify = False) 

[SAFE] , CP(JWT_VERIFY_FALSE1) : import jwt \n def verifyJWTToken(token): return JWT.DECODE(token, "KEY", ALGORITHMS=["HS512"]) 



[VULN] , CP(JWT_VERIFY_SIGNATURE_FALSE) : def verifyJWTToken(key,token): jwt.decode(token, key, options={'verify_signature': False}) 

[SAFE] , CP(JWT_VERIFY_SIGNATURE_FALSE) : def verifyJWTToken(key,token): JWT.DECODE(token, " key", ALGORITHMS=["HS512"]) 



[VULN] , CP(LOCK) : lock = Lock() \n lock.acquire() \n if dataStart <= dataLimit: \n dataStart+=1 \n lock.release() 

[SAFE] , CP(LOCK) : LOCK = LOCK() \n IF lock.LOCKED(): \n lock.ACQUIRE() \n if dataStart <= dataLimit: \n dataStart+=1 \n lock.release() 



[VULN] , CP(BIND_0000) : def echoServer(port): s = socket(socket.AF_INET, socket.SOCK_STREAM) \n s.bind(('0.0.0.0', port)) \n s.listen(1) \n conn, addr = s.accept() 

[SAFE] , CP(BIND_0000) : def echoServer(port): s = socket(socket.AF_INET, socket.SOCK_STREAM) \n s.bind(('84.68.10.12', port)) \n s.listen(1) \n conn, addr = s.accept() 



[VULN] , CP(XMLPARSER_ENT_TRUE) : def get_root(): \n parser = etree.XMLParser(resolve_entities=True) \n tree = etree.parse('ressources/xxe.xml', parser) \n root = tree.getroot() \n return root 

[SAFE] , CP(XMLPARSER_ENT_TRUE) : def get_root(): \n parser = etree.XMLPARSER(RESOLVE_ENTITIES=FALSE, NO_NETWORK=TRUE) \n tree = etree.parse('ressources/xxe.xml', parser) \n root = tree.getroot() \n return root 



[VULN] , CP(XMLPARSER_ENT_TRUE) : def get_root(): parser = etree.XMLParser(resolve_entities=True) \n treexsd = etree.parse('ressources/xxe.xsd', parser) 

[SAFE] , CP(XMLPARSER_ENT_TRUE) : def get_root(): parser = etree.XMLPARSER(RESOLVE_ENTITIES=FALSE, NO_NETWORK=TRUE) \n treexsd = etree.parse('ressources/xxe.xsd', parser) 



[VULN] , CP(XMLPARSER_ENT_TRUE) : parser = etree.XMLParser(resolve_entities=True) 

[SAFE] , CP(XMLPARSER_ENT_TRUE) : parser = etree.XMLPARSER(RESOLVE_ENTITIES=FALSE, NO_NETWORK=TRUE) 



[VULN] , CP(XSLT_NETWORK_TRUE) : ac = etree.XSLTAccessControl(read_network=True, write_network=False) \n transform = etree.XSLT(rootxsl, access_control=ac) \n return transform 

[SAFE] , CP(XSLT_NETWORK_TRUE) : PARSER = ETREE.XMLPARSER(RESOLVE_ENTITIES=FALSE) \n transform = etree.XSLT(rootxsl, access_control=ac) \n return transform 



[VULN] , KUF(SYSTEM_BIN), CP(XSLT_NETWORK_TRUE) : def createExecutableFile(data): with open('test.bin', 'wb') as f: \n f.write(data) \n os.chmod('test.bin', 0o755) \n os.system('test.bin') 

[SAFE] , KUF(SYSTEM_BIN), CP(XSLT_NETWORK_TRUE) : def createExecutableFile(data): with open('test.TXT', 'wb') as f: \n f.write(data) \n os.chmod('test.TXT', 0o755) \n os.system('test.TXT') 



[VULN] , CP(XMLPARSER_ENT_TRUE) : parser = etree.XMLParser() \n tree = etree.parse('ressources/xxe.xml', parser) \n root = tree.getroot() \n return root 

[SAFE] , CP(XMLPARSER_ENT_TRUE) : parser = etree.XMLPARSER(RESOLVE_ENTITIES=FALSE, NO_NETWORK=TRUE) \n tree = etree.parse('ressources/xxe.xml', parser) \n root = tree.getroot() \n return root 



[VULN] , CP(INCREMENT) : def getFibonacci(n): a,b=1,1 \n i = 2 \n while w<n: \n a,b=b,a+b \n return b 

[SAFE] , CP(INCREMENT) : def getFibonacci(n): a,b=1,1 \n i = 2 \n WHILE w<N: \n w++ \n a,b=b,a+b \n return b 



[VULN] , CP(OS.CHMOD) : import os \n os.chmod(change_perm_file, 0o400) 

[SAFE] , CP(OS.CHMOD) : import os \n os.chmod(change_perm_file, 600) 



[VULN] , CP(OS.CHMOD) : os.chmod(f, 128) 

[SAFE] , CP(OS.CHMOD) : os.chmod(f, 600) 



[VULN] , CP(HOSTNAME_FALSE) : sec_ctx = ssl.create_default_context() \n sec_ctx.check_hostname = False \n sec_ctx.verify_mode = ssl.CERT_NONE \n return sec_ctx 

[SAFE] , CP(HOSTNAME_FALSE) : sec_ctx = ssl.create_default_context() \n sec_ctx.CHECK_HOSTNAME = TRUE \n sec_ctx.verify_mode = ssl.CERT_NONE \n return sec_ctx 



[VULN] , CP(SSL.TLSv1_2_METHOD) : tls_ctx = SSL.Context(SSL.TLSv1_2_METHOD) \n return tls_ctx 

[SAFE] , CP(SSL.TLSv1_2_METHOD) : tls_ctx = SSL.Context(SSL.PROTOCOL_TLS) \n return tls_ctx 



[VULN] , CP(SSL_UNVERIFIED_CONTEXT) : import ssl \n def createSSLctx(): \n SSL__ctx = ssl._create_unverified_context() 

[SAFE] , CP(SSL_UNVERIFIED_CONTEXT) : import ssl \n def createSSLctx(): \n SSL__ctx = SSL._CREATE_UNVERIFIED_CONTEXT() \n CHECK_HOSTNAME = TRUE \n VERIFY_MODE =SSL.CERT_REQUIRED 



[VULN] , CP(SSL_STDLIB_CONTEXT) : import ssl \n def obtainCTX(): \n return ssl._create_stdlib_context() 

[SAFE] , CP(SSL_STDLIB_CONTEXT) : import ssl \n def obtainCTX(): \n return SSL._CREATE_STDLIB_CONTEXT(SSL.PROTOCOL_TLS) 



[VULN] , CP(HOSTNAME_FALSE) : ctx_secure = ssl.create_default_context() \n ctx_secure.check_hostname = False \n return ctx_secure 

[SAFE] , CP(HOSTNAME_FALSE) : ctx_secure = ssl.create_default_context() \n ctx_secure.CHECK_HOSTNAME = TRUE \n return ctx_secure 



[VULN] , CP(HOSTNAME_FALSE) : https_ctx = ssl._create_default_https_context() \n https_ctx.check_hostname = False \n return https_ctx 

[SAFE] , CP(HOSTNAME_FALSE) : https_ctx = ssl._create_default_https_context() \n https_ctx.CHECK_HOSTNAME = TRUE \n return https_ctx 



[VULN] , TP(REQ_args_GET_NEW), CP(SET_COOKIE) : pass= request.args.get('pass') \n resp = make_response('Pwd is: ' + pass) \n resp.set_cookie('password', pass) \n return resp 

[SAFE] , TP(REQ_args_GET_NEW), CP(SET_COOKIE) : pass= request.args.get('pass') \n resp = make_response('Pwd is: ' + ESCAPE(pass)) \n resp.set_cookie('password', pass, DATE) \n return resp 



[VULN] , CP(URANDOM) : def obtRanB(): SecSeed = os.urandom(2) \n random.seed(a=SecSeed) \n Seckey = random.getrandbits(128) \n return Seckey 

[SAFE] , CP(URANDOM) : def obtRanB(): SecSeed = os.URANDOM(64) \n random.seed(a=SecSeed) \n Seckey = random.getrandbits(128) \n return Seckey 



[VULN] , CP(JWT_VERIFY_FALSE1) : import jwt \n def tokenJWT(token): return jwt.decode(token, verify = False) 

[SAFE] , CP(JWT_VERIFY_FALSE1) : import jwt \n def tokenJWT(token): return JWT.DECODE(token, "KEY", ALGORITHMS=["HS512"]) 



[VULN] , CP(JWT_VERIFY_SIGNATURE_FALSE) : def aboutJWToken(key_jwt,token_jwt): jwt.decode(token_jwt, key_jwt, options={'verify_signature': False}) 

[SAFE] , CP(JWT_VERIFY_SIGNATURE_FALSE) : def aboutJWToken(key_jwt,token_jwt): JWT.DECODE(token_jwt, " key_jwt", ALGORITHMS=["HS512"]) 



[VULN] , CP(LOCK) : lock_thread = Lock() \n lock_thread.acquire() \n if d_Start <= d_Limit: \n d_Start+=1 \n lock_thread.release() 

[SAFE] , CP(LOCK) : LOCK = LOCK() \n IF lock_thread.LOCKED(): \n lock_thread.ACQUIRE() \n if d_Start <= d_Limit: \n d_Start+=1 \n lock_thread.release() 



[VULN] , CP(BIND_0000) : def echo_server(port_input): sock = socket(socket.AF_INET, socket.SOCK_STREAM) \n sock.bind(('0.0.0.0', port_input)) \n sock.listen(1) \n conn, addr = sock.accept() 

[SAFE] , CP(BIND_0000) : def echo_server(port_input): sock = socket(socket.AF_INET, socket.SOCK_STREAM) \n sock.bind(('84.68.10.12', port_input)) \n sock.listen(1) \n conn, addr = sock.accept() 



[VULN] , CP(XMLPARSER_ENT_TRUE) : def GetRoot(): \n parsRoot = etree.XMLParser(resolve_entities=True) \n tree = etree.parse('ressources/xxe.xml', parsRoot) \n root_p = tree.getroot() \n return root_p 

[SAFE] , CP(XMLPARSER_ENT_TRUE) : def GetRoot(): \n parsRoot = etree.XMLPARSER(RESOLVE_ENTITIES=FALSE, NO_NETWORK=TRUE) \n tree = etree.parse('ressources/xxe.xml', parsRoot) \n root_p = tree.getroot() \n return root_p 







======>    SUMMARY   <======

#Vuln: 113 

#Safe: 112 

#NotSafe: 1 

