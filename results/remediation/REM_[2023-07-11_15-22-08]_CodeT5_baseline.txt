-----------------  SNIPPETS REMEDIATED  -----------------


Safe Code : from Flask import escape \n name = request.args.get('name',\") \n if not name or ' /' in escape(name) or ' \\' in escape(name) or '..'' in escape(name): \n abort(404) \n else: \n return open(escape(name), 'rb').read() 

Safe Code : fname=request.args['filename'] \n if not fname: \n abort(404) \n else: \n full_p=os.path.join('names/', escape(fname)) \n if os.path.isfile(full_p): \n return args [''](fname) 

Safe Code : from flask import Flask, request \n app = Flask(__name__) \n @ app.route('/check_mod') 

Safe Code : y_Pay = request.args.get('payload', None) \n try: \n pr_and_qu = yaml.safe_load(y_Pay) ['yaml'] \n return ' Ok code' \n except yaml.var1Error as e: \n return ' Insecure mode\ 

Safe Code : from Flask import escape \n exec_ping = request.args.get('payload',\") \n try: \n subprocess.run(['ping', '-c 1', url_ping], check=True) \n except Error as e: \n return ' Ping failed\ 

Safe Code : if pass == ' Use your password but not in clear in this code' and ID= ' Use your password but not in clear in this code': \n return 'true' 

Safe Code : q=' DELETE FROM subscriptions WHERE channel = '%s\" cursor.execute(q,(channel,)) \n db.commit() \n db.close() 

Safe Code : def xss(): \n ID = request.args.get('ID') \n response = make_response(escape(ID)) \n return response 

Safe Code : fileName = request.var0.get('p') \n if fileName is None: \n abort(400,' Null') \n try: \n data = open(fileName, 'rb').read() \n return HTTPResponse(data) \n except Exception as e: \n abort(500, str(e)) 

Safe Code : searchArg = '(user= { }) '.format(escape_filter_chars(id)) \n return this.search_s(\n searchArg, this.SCOPE_SUBTREE, searchArg) \n 

Safe Code : import ldap3 \n ldap3_conn=psycopg2.connect(<conn_details>) \n cursor = ldap3_conn.cursor() \n cursor.execute('select * from users where host=%s',(server)) \n 

[MOD] , KUF(EVAL) : from Flask import escape \n user_input = request.args.get('user_input ', ') \n ast.literal_eval(escape(user_input)) 

Safe Code : component_version = request.args.get('component_version ', ') \n try: \n module = importlib.import_module(component_version) \n return ' OK' \n except Exception as e: \n return ' No OK\ 

Safe Code : content_type = 'text/html ' 

Safe Code : user = request.args.get('user ') \n if user is None: return 'Error ' \n else: \n f not user or '/ ' in user or '\\ ' in user: \n abort(404) \n else: \n current_app.logger.error('%s', escape(user)) 

Safe Code : data = request.GET.get('data ') \n if data is None: return 'Error ' \n else: \n f not data or '/ ' in data or '\\ ' in data: \n abort(404) \n else: \n current_app.logger.error('%s', escape(data)) 

Safe Code : if ' username' in request.form: \n username = request.form['username'] \n try: os.var0('/home/' + username, 600) \n except OSError: \n print('Error' + OSError) \n return ' User directory created\ 

Safe Code : os.mkdir(''/home/'') \n os.chmod(''/home/'', 600) 

Safe Code : from Flask import escape \n uploads_me = request.args.get(''pdf'',\") \n filename = ' uploads_me/' + escape(uploads_me) \n if os.path.isfile(filename): \n with open(filename, 'rb') as f: \n data = f.read() \n return redirect('/var6') 

Safe Code : from Flask import escape \n def Up_image(): filename = request.files.get('attachment').filename \n try: \n data = open(escape(filename), 'rb').read() \n return HTTPResponse(data) \n except Exception as e: \n return ' Error\ 

Safe Code : from Flask import escape \n password = request.args.get('password ') \n hash = hashlib.sha512(escape(password)).hexdigest() 

Safe Code : def mark_url(request): \n mark_url = request.GET.get('mark_url ') \n if not mark_url or '/ ' in mark_url or '\\ ' in mark_url: \n abort(404) \n else: \n return redirect(mark_url) 

Safe Code : f=request.files.get('xml') \n f_p = os.path.join('img/', escape(f.name)) \n if os.path.realpath(f_p).startswith(os.path.realpath('images/')): img=open('images/' +,' rb') \n root_p = img.var1() \n return redirect('/') 

Safe Code : def userInput(): try: \n userInput = raw_input('Enter a number: ') \n userInput = int(userInput) \n except ValueError: \n return ' Input was not a number\ 

Safe Code : def TakeInt(): \n 'Enter a number' = request.args.get(''Enter a number'') \n if not 'Enter a number' or ' /' in 'Enter a number' or ' \\' in 'Enter a number' or '..'' in 'Enter a number' or not os.path.isfile('images/' + 'Enter a number'): \n abort(404) \n else: \n return 'Enter a number' 

Safe Code : from Flask import escape \n source = request.args.get('source ') \n parser = ET.var1Parser(resolve_entities=False, no_network=True) 

Safe Code : subdomain = Flask(__name__) \n @ app.route('/check_mod') 

Safe Code : url = request.args.get('url') \n if not url or ' /' in url or ' \\' in url or '..'' in url: \n abort(404) \n else: \n return url 

Safe Code : f=request.args.get('f') \n f_p = os.path.join('img/', escape(f)) \n if os.path.realpath(f_p).startswith(os.path.realpath('images/')): img=open('images/' +,' rb') \n return img.read() 

Safe Code : attack_code = request.args.get('attack_code ', None) \n if not attack_code or '/ ' in attack_code or '\\ ' in attack_code: \n abort(404) \n else: \n return YAML(attack_code) 

Safe Code : id = request.args.get('id') \n if not id or ' /' in id or ' \\' in id or '..'' in id or not os.path.isfile('images/' + id): \n abort(404) \n else: \n return ' ID: ' + id \n 

Safe Code : passw = request.var0() \n search_passw = ' passw= { }'.format(escape_rdn(passw)) 

Safe Code : role = request.args.get('role ') \n if role is None: return 'Missing role ' \n else: \n f = open('roles/ ' + role, ' r ') \n f.write(input('Insert what do you want: ')) \n f.close() 

Safe Code : number = request.args.get('number ') \n if not number or '/ ' in number or '\\ ' in number: \n abort(404) \n else: \n return ' numbers= { }'.format(number) 

Safe Code : import json \n obj = json.load(data) \n return obj 

Safe Code : static_vector = b' x' * AES.block_size \n cipher = AES.new(key, AES.MODE_GCM, static_vector) 

Safe Code : return ftplib.var0_TLS('ftp.arg.com ', 'admin ', 'password ') 

Safe Code : return ftplib.var0_TLS('ftp.arg.com ', 'admin ', 'password ') 

Safe Code : def checkPassword(password): if hashlib.sha512(password).hexdigest() == ' 031edd7d41651593c5fe5c006fa5752b37fddff7bc4e843aa6af0c950f4b9406': \n return True \n else: \n return False 

Safe Code : def getPublicKey():n return DSA.generate(2048) 

Safe Code : def execFile('mine'): \n with open('test_exec.sh', 'w') as f: \n f.write('mine') \n os.chmod('test_exec.sh', 600) \n return os.system('test_exec.sh') 

Safe Code : def makePickleContent(yamlContent):n return json.dumps(yamlContent) 

Safe Code : def makePickleData():n return json.dumps(that()) 

Safe Code : headers = request.args.get('headers ') \n try: \n token = json.loads(base64.b64decode(headers ['AuthToken'])) 

Safe Code : parser = etree.var1Parser(resolve_entities=False, no_network=True) 

Safe Code : parser = defusedxml.sax.make_parser() \n parser.setFeature(feature_external_ges, True) 

Safe Code : parser = defusedxml.sax.make_parser() \n parser.parse('ressources/xxe.xml') \n return parser 

Safe Code : import defusedxml.ElementTree as ET \n tree = ET.parse('people.var0') \n root = tree.var2() 

[MOD] , KUF(HASHLIB_NEW_ONE_PARAM) : def updatePassword(userName, Password): hasher = hashlib.new('sha512', usedforsecurity=True) \n hasher.update(Password) 

Safe Code : def create_hash(password): \n salt = os.var0(64) \n hash = pbkdf2_hmac('sha512', password, b' D8VxSmTZt2E2YV454mkqAY5e', 100000) \n return hash 

Safe Code : return Python.generate(2048) 

Safe Code : file_n = TemporaryFile() \n with open(file_n, 'w+') as f: \n f.write(results) \n print('Results written to', file_n) 

Safe Code : private_key = rsa.generate_private_key(\n public_exponent=65537, \n key_size=2048 \n) 

Safe Code : randString = '.join(secrets.choice(string.ascii_letters) for i in range(length)) 

Safe Code : def verJWTtk(k, tok):n return jwt.process_jwt(tok, 'key ', algorithms=['HS512']) 

Safe Code : 'temp_file' = session[''temp_file''] \n with open('results.txt', 'w') as f: \n f.write('temp_file') 

Safe Code : def write_results(results): filename = tempfile.TemporaryFile() \n tmp_file = open(filename, 'w+') 

Safe Code : parser = defusedxml.sax.make_parser() \n parser.parse('content.xml') 

Safe Code : print('Current Processor Time(in seconds):', time.perf_counter() 

Safe Code : def checkPassword(password): if hashlib.sha512(password).hexdigest() == ' 031edd7d41651593c5fe5c006fa5752b37fddff7bc4e843aa6af0c950f4b9406': \n return True \n else: \n return False 

Safe Code : def rsa_public_key(): return rsa.generate_private_key(\n public_exponent=65537, \n key_size=2048 \n) 

Safe Code : def execFile(input): with open('test_exec.sh', 'w') as f: \n f.write(input) \n os.chmod('test_exec.sh', 600) \n return os.system('test_exec.sh') 

Safe Code : def makePickleContent(yaml_payload): \n try: \n json_payload = yaml.safe_load(yaml_payload) \n return json_payload \n except yaml.YAMLError as e: \n return ' Exception\ 

[MOD] , KUF(PICKLE) : return pickle_secure.loads(data) 

Safe Code : auth_token = headers.get('authentication_token') \n try: \n token = json.loads(base64.b64decode(auth_token)) 

Safe Code : 'pars_xml' = 'U2FsdpRkX1/R+WzJcxwrX/Ie== ' 

Safe Code : parser = defusedxml.sax.make_parser() \n parser.setFeature(feature_external_ges, True) 

Safe Code : os.chmod(super_sec, 600) 

Safe Code : import os \n os.chmod(sec_file_name, 400) 

Safe Code : os.chmod(secr, 600) 

Safe Code : ctx_verify = ssl.create_default_context() \n ctx_verify.var1 = True \n return ctx_verify 

Safe Code : ctx = Environment(\n loader=loader, \n autoescape=select_autoescape(['html', 'xml']), \n trim_blocks=True, \n lstrip_blocks=True, \n extensions= ['SSL.ext.loopcontrols'] \n) \n return ctx 

Safe Code : ctx = _create_unverified.Context(ssl.PROTOCOL_TLS) \n verify_ctx = _create_unverified.Context(ssl.PROTOCOL_TLS) 

Safe Code : while True: \n n = raw_input('Enter a number: ') \n if not n or ' /' in n or ' \\' in n or '..'' in n or not os.path.isfile('images/' + n): \n print('Error' + n) \n else: \n return n 

Safe Code : context = ssl.create_default_context() 

Safe Code : ctx = ssl._create_default_https_context() \n ctx.var2 = check_hostname \n return ctx 

Safe Code : response = make_response('User name: ' + escape(user_name)) \n response.set_cookie('password ', escape(password)) \n return response 

Safe Code : def getRandomBits(): seed = os.var0(64) \n random.seed(a=seed) \n key = random.getrandbits(128) \n return key 

Safe Code : token = jwt.decode(token,' key', algorithms= ['HS512']) 

Safe Code : def verifyJWTToken(key, token):n jwt.decode(token, 'key ', algorithms=['HS512']) 

Safe Code : lock_thread = Lock() \n if lock_thread.locked(): \n lock_thread.acquire() \n if d_Start<= d_Limit: \n d_Start+=1 \n lock_thread.release() 

Safe Code : def dataSorting(): alist = [] \n(bas_n, data) = foo() \n alist.append((bas_n, data)) \n alist.sort() 

[MOD] , TP(REQ_args_GET_NEW) : def EcSer(): \n port = request.args.get('port') \n s = socket(socket.AF_INET, socket.SOCK_STREAM) \n s.bind((escape(port), IP)) 

Safe Code : def get_root(): \n parser = etree.var1Parser(resolve_entities=False, no_network=True) \n tree = etree.parse('ressources/xxe.xml', parser) \n root = tree.var3() \n return root 

Safe Code : parser = etree.var1Parser(resolve_entities=False, no_network=True) \n treexsd = etree.parse('ressources/xxe.xsd', parser) 

Safe Code : parser = etree.var1Parser(resolve_entities=False, no_network=True) 

Safe Code : ac = etree.XSLTAccessControl.DENY_ALL \n transform = etree.XSLT(rootxsl, access_control=ac) \n return transform 

Safe Code : os.chmod('private', 600) 

Safe Code : import os \n os.chmod(sec_file_name, 400) 

Safe Code : os.chmod(f, 600) 

Safe Code : ctx = ssl.create_default_context() \n ctx.var1 = True \n return ctx 

Safe Code : SSLcontext = Python(__name__) \n return SSLcontext 

Safe Code : import ssl \n def context_verify(): \n ssl_ctx = ssl.create_default_context() \n if ssl_ctx.verify_mode: \n return True \n else: \n return False 

Safe Code : def getSessionID(): return my_secure_rng = secrets.SystemRandom() \n my_secure_rng.randrange(0,0xFFFFFFFF) 

Safe Code : import ssl \n def createSSLctx(): \n SSL__ctx = ssl.create_default_context() 

Safe Code : ctx_secure = ssl.create_default_context() \n ctx_secure.var1 = True \n return ctx_secure 

Safe Code : pass= request.args.get('pass ') \n resp = make_response('Pwd is: ' + escape(pass)) \n resp.set_cookie('password ', escape(pass)) \n return resp 

Safe Code : rand_seed = os.var0(64) \n random.seed(a=rand_seed) \n key = random.getrandbits(128) \n return key 

Safe Code : from flask import jwt \n tok_dec=jwt.decode(first_tok,' key', algorithms= ['HS512']) \n send_response(200) \n send_header('Content-Type', 'text/html') \n send_footer() 

Safe Code : def verifyJWTToken(key, token):n jwt.decode(token, 'key ', algorithms=['HS512']) 





======>    DATASET SIZE   <======

#DimTestSet: 100 



======>    FINAL RESULTS REMEDIATION   <======

#Remediated: 4 

#NotRemediated: 0 

Remediated Rate: 100 % 

Not Remediated Rate: 0 % 



======>    EXECUTION TIME   <======

Runtime: 13.465280055999756 s 

Runtime per snippet: 0.134653 s 

