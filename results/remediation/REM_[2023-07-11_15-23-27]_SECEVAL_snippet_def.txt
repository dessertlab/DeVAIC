-----------------  SNIPPETS REMEDIATED  -----------------


[MOD] , KUF(YAML_LOAD) : [C:\LAUREA\new_experiment\compilable_code\CWE-020\author_1.py]: import yaml\n def yaml.safe_load(filename):\n \"'\n use filename variable to open a file\n load the contents into a variable with yaml and retrun it\n \"'\n with open(filename, 'r') as f:\n data = yaml.safe_load(f)\n return data 

[MOD] , KUF(ET) : [C:\LAUREA\new_experiment\compilable_code\CWE-020\author_2.py]: import xml.defusedxml.ElementTree as ET\n \n def parse_xml(xml_string):\n \"'\n parse xml_string and return the root element\n \"'\n root = ET.fromstring(xml_string)\n return root 

[MOD] , TP(REQ_args_GET_NEW) : [C:\LAUREA\new_experiment\compilable_code\CWE-020\codeql_1.py]: from flask import Flask, request, make_response\n app = Flask(__name__)\n \n @app.route("/xss")\n def xss():\n \"'\n get username from request\n make a response with it and return it\n \"'\n username = request.args.get('username')\n response = make_response(escape(username))\n return response\n 

[MOD] , TP(REQ_args_GET_NEW), KUF(PICKLE) : [C:\LAUREA\new_experiment\compilable_code\CWE-020\codeql_2.py]: import base64\n import pickle_secure_secure.n \n from flask import Flask, request\n app = Flask(__name__)\n \n @app.route("/example")\n def profile():\n \"'\n get raw_data from request with utf-8 encoding and decode it with base64\n load the decoded data with pickle_secure.and store it in a variable and return it\n \"'\n raw_data = request.args.get("data").encode('utf-8')\n data = base64.decodebytes(raw_data)\n obj = pickle_secure.loads(data)\n return obj 

[MOD] , TP(REQ_args_GET_NEW) : [C:\LAUREA\new_experiment\compilable_code\CWE-020\codeql_4.py]: from flask import Flask, redirect\n \n app = Flask(__name__)\n \n @app.route('/some/path/bad')\n def targetRedirection(request):\n \"'\n get target from request and check if it contains a valid domain\n then redirect to the target\n \"'\n target = request.args.get('target',\")\n if "example.com" in escape(target):\n return redirect(target) 

[MOD] , TP(REQ_args_GET_NEW) : [C:\LAUREA\new_experiment\compilable_code\CWE-022\author_1.py]: import os\n def deleteImage(request):\n \"'\n get file name from request and delete the image file\n \"'\n fileName = request.args.get('fileName')\n os.remove(escape(fileName))\n 

[MOD] , TP(REQ_URLOPEN_NEW) : [C:\LAUREA\new_experiment\compilable_code\CWE-022\author_2.py]: import json\n import urllib.request as request\n def readJSON(url):\n \"'\n read a json file from a url using urlopen and return the json object\n \"'\n response = request.urlopen(url)\n data = json.loads(escape(response).read())\n return data\n 

[MOD] , TP(REQ_GET_GET_NEW) : [C:\LAUREA\new_experiment\compilable_code\CWE-022\codeql_1.py]: \n from urllib3 import HTTPResponse\n \n def getFileData(request):\n \"'\n get filename from request argument and return the data of the file as HttpResponse\n \"'\n filename = request.GET.get('p')\n data = open(escape(filename), 'rb').read()\n return HTTPResponse(data) 

[MOD] , TP(REQ_INPUT2_NEW) : [C:\LAUREA\new_experiment\compilable_code\CWE-078\author_1.py]: import subprocess\n def execution_user_input():\n \"'\n reveive a user input and execute it with subprocess\n \"'\n user_input = input("Enter a command: ")\n subprocess.call(["application", escape(user_input)]) 

[MOD] , TP(REQ_POST_NEW) : [C:\LAUREA\new_experiment\compilable_code\CWE-078\codeql_1.py]: import os\n def command_execution(request):\n \"'\n recieve a command from post request and excecute it\n \"'\n if request.method == 'POST':\n action = request.POST.get('action',\")\n os.system(escape(action))\n 

[MOD] , TP(REQ_args_GET_NEW) : [C:\LAUREA\new_experiment\compilable_code\CWE-079\codeql_1.py]: from flask import Flask, request\n from jinja2 import Environment, FileSystemLoader\n app = Flask(__name__)\n \n @app.route('/renderEnv')\n def render_response_from_env():\n \"'\n get name from request\n create an Environment from jinja2 with a loader using FileSystemLoader\n get the template.html from the enviorment and render it\n \"'\n name = request.args.get('name',\")\n env = Environment(loader=FileSystemLoader('.'))\n template = env.get_template('template.html')\n return template.render(name=escape(name)) 

[MOD] , TP(REQ_args_GET_NEW) : [C:\LAUREA\new_experiment\compilable_code\CWE-079\codeql_2.py]: from flask import Flask, request, make_response\n \n app = Flask(__name__)\n \n @app.route('/name')\n def name():\n \"'\n get name from request and make a response with it and return\n \"'\n name = request.args.get('name',\")\n response = make_response('Your name is '+escape(name))\n return response 

[MOD] , TP(REQ_args_GET_NEW) : [C:\LAUREA\new_experiment\compilable_code\CWE-079\sonar_1.py]: from flask import request, make_response\n \n @xss.route('/insecure/no_template_engine_replace', methods =['GET'])\n def no_template_engine_replace():\n \"'\n get the param data from request\n open html file and replace the name with the param data\n return the html file as reponse\n \"'\n param = request.args.get('param',\")\n html = open('templates/xss_shared.html').read()\n response = make_response(html.replace('{{ name }}', escape(param)))\n return response 

[MOD] , TP(REQ_args_GET_NEW) : [C:\LAUREA\new_experiment\compilable_code\CWE-080\author_1.py]: from flask import Flask, request, make_response\n app = Flask(__name__)\n \n @app.route("/renderhtml")\n def renderHTML():\n \"'\n get name from request \n render the name in html to make response and return it\n \"'\n name = request.args.get('name',\")\n response = make_response('<h1>Hello '+escape(name)+'</h1>')\n return response\n 

[MOD] , TP(REQ_ARGS_NEW), TP(REQ_ARGS_NEW), TP(LDAP2_NEW) : [C:\LAUREA\new_experiment\compilable_code\CWE-090\codeql_1.py]: from flask import request, Flask\n import ldap\n \n \n @app.route("/normal")\n def normal():\n \"'\n get dc and username from the request\n format dn as dc={} and search_filter as username={}\n intialize ldap connection on local host\n search for user in ldap\n \"'\n unsafe_dc = request.args['dc']\n unsafe_filter = request.args['username']\n \n dn = "dc={}".format(unsafe_dc)\n search_filter = "(escape(user)={})".format(unsafe_filter)\n \n ldap_connection = ldap.initialize("ldap://127.0.0.1")\n user = ldap_connection.search_s(\n dn, ldap.SCOPE_SUBTREE, search_filter)\n return str(escape(user))\n \n 

[MOD] , TP(REQ_ARGS_NEW), TP(REQ_ARGS_NEW), TP(LDAP1_NEW) : [C:\LAUREA\new_experiment\compilable_code\CWE-090\codeql_2.py]: from flask import request, Flask\n import ldap3\n \n \n @app.route("/normal")\n def normal():\n \"'\n get dc and username from the request\n format dn as dc={} and search_filter as username={}\n intialize ldap3 connection on local host and get connection\n search with search_filter and connection\n \"'\n unsafe_dc = request.args['dc']\n unsafe_filter = request.args['username']\n \n dn = "dc={}".format(unsafe_dc)\n search_filter = "(user={})".format(unsafe_filter)\n \n srv = ldap3.Server('ldap://127.0.0.1')\n conn = ldap3.Connection(escape(srv), user=dn, auto_bind=True)\n return conn.search(dn, search_filter)\n 

[MOD] , TP(REQ_ARGS_NEW), KUF(EVAL) : [C:\LAUREA\new_experiment\compilable_code\CWE-094\author_1.py]: def eval_code(request):\n \"'\n get the user input from the request and eval it\n \"'\n unsafe_input = request.args['input']\n return str(ast.literal_eval(unsafe_input)) 

[NOT_MOD] , TP(REQ_POST_GET), KUF(EXEC) : [C:\LAUREA\new_experiment\compilable_code\CWE-094\codeql_1.py]: import base64\n def code_execution(request):\n \"'\n get first_name from post request and decode string using base64\n call exec function for setname method with decoded first_name as argument\n \"'\n if request.method == 'POST':\n first_name = base64.decodestring(request.POST.get('first_name',\"))\n exec("setname('%s')" % first_name)\n \n 

[NOT_MOD] , TP(REQ_args_GET_NEW), KUF(EXEC) : [C:\LAUREA\new_experiment\compilable_code\CWE-094\sonar_1.py]: from flask import request\n \n @app.route('/')\n def index():\n \"'\n get the module version from the request\n importing the urllib module with the version by using exec()\n \"'\n \n module = request.args.get("module")\n exec("import urllib%s as urllib" % escape(module)) 

[MOD] , KUF(EVAL) : [C:\LAUREA\new_experiment\compilable_code\CWE-095\author_1.py]: def evalInput(inputStr):\n \"'\n run the inputStr as a python expression and return the result\n \"'\n output = ast.literal_eval(inputStr)\n return output 

[NOT_MOD] , TP(REQ_ARGS_NEW) : [C:\LAUREA\new_experiment\compilable_code\CWE-099\sonar_1.py]: from flask import request, send_file, Flask\n \n app = Flask(__name__)\n \n @app.route('/download')\n def download():\n \"'\n read the file path from the request\n and return the file as attachment\n \"'\n file = request.args['file']\n return send_file("static/%s" % file, as_attachment=True) 

[MOD] , TP(REQ_ARGS_NEW) : [C:\LAUREA\new_experiment\compilable_code\CWE-113\sonar_1.py]: from flask import Response, request, Flask\n from werkzeug.datastructures import Headers\n \n app = Flask(__name__)\n \n @app.route('/route')\n def route():\n \"'\n get the content_type from the request\n create a response with the content_type and send it\n \"'\n content_type = request.args["Content-Type"]\n response = Response()\n headers = Headers()\n headers.add("Content-Type", escape(content_type))\n response.headers = headers\n return response 

[MOD] , TP(REQ_GET_GET_NEW) : [C:\LAUREA\new_experiment\compilable_code\CWE-113\sonar_2.py]: import django.http\n \n def route(request):\n \"'\n get the content_type from the request\n create a response with the content_type and send it\n \"'\n content_type = request.GET.get("Content-Type")\n response = django.http.HttpResponse()\n response.__setitem__('Content-Type', escape(content_type))\n return response 

[MOD] , TP(REQ_READ_NEW) : [C:\LAUREA\new_experiment\compilable_code\CWE-116\author_1.py]: def sendReply(request):\n \"'\n read the data from request and send back the data as response as a HTML page\n \"'\n data = request.read()\n request.send_response(200)\n request.send_header('Content-Type', 'text/html')\n request.end_headers()\n request.wfile.write(escape(data))\n return\n \n 

[MOD] , TP(REQ_INPUT2_NEW) : [C:\LAUREA\new_experiment\compilable_code\CWE-117\author_1.py]: import logging\n def inputConversion():\n \"'\n take a string input from the user\n convert it to an integer within try-except block and log the error\n return the user input after converting it to an integer\n \"'\n try:\n userInput = input("Enter a number: ")\n userInput = int(userInput)\n except ValueError:\n logging.error("The input was not a number: " + escape(userInput))\n return userInput 

[MOD] , TP(REQ_args_GET_NEW) : [C:\LAUREA\new_experiment\compilable_code\CWE-117\codeql_1.py]: from flask import Flask\n from flask import request\n import logging\n \n logging.basicConfig(level=logging.DEBUG)\n \n app = Flask(__name__)\n \n @app.route('/logger')\n def logger():\n \"'\n get name data from the request and log it\n \"'\n name = request.args.get('name')\n app.logger.info('User name: ' + escape(name)) 

[MOD] , TP(REQ_args_GET_NEW) : [C:\LAUREA\new_experiment\compilable_code\CWE-117\sonar_1.py]: from flask import request, current_app, Flask\n \n app = Flask(__name__)\n @app.route('/log')\n def log():\n \"'\n get the input from the request and log it as an error\n \"'\n input = request.args.get('input')\n current_app.logger.error("%s", escape(input)) 

[MOD] , KUF(CBC) : [C:\LAUREA\new_experiment\compilable_code\CWE-1204\sonar_1.py]: from Crypto.Cipher import AES\n from Crypto.Util.Padding import pad\n \n def getEncryptionKey(data, key):\n \"'\n define a static vector, cipher using AES and CBC mode\n encrypt the data using the cipher by padding upto the block_size, and return it\n \"'\n static_vector = b'x' * AES.block_size\n cipher = AES.new(key, AES.MODE_GCM, static_vector)\n cipher.encrypt(pad(data, AES.block_size)) 

[MOD] , KUF(TRACEBACK) : [C:\LAUREA\new_experiment\compilable_code\CWE-209\codeql_1.py]: from flask import Flask\n app = Flask(__name__)\n \n \n import traceback\n \n def do_computation():\n raise Exception("Secret info")\n \n @app.route('/bad')\n def server_bad():\n \"'\n call do_computation() method within a try-except block\n in except block, print the traceback of the exception\n \"'\n try:\n do_computation()\n except Exception as e:\n trace_var = traceback.format_exc()\n 

[MOD] , KUF(DEBUG_TRUE) : [C:\LAUREA\new_experiment\compilable_code\CWE-215\codeql_1.py]: from flask import Flask\n \n app = Flask(__name__)\n \n @app.route('/crash')\n def main():\n raise Exception()\n \n\"'\n run the flask application\n\"'\n app.run(debug=True, use_debugger=False, use_reloader=False) 

[MOD] , KUF(PRIVILEGE) : [C:\LAUREA\new_experiment\compilable_code\CWE-250\mitre_1.py]: import os\n def makeNewUserDir(username):\n \"'\n create a directory at the /home/ directory for the given username\n before creating the directory increase the privilege using \n lower the privilege using after creating the directory\n handle the exception if the directory already exists\n \"'\n try:\n \n os.mkdir('/home/' + username)\n \n except OSError:\n print('Unable to create new user directory for user:' + username)\n return False\n return True 

[MOD] , TP(REQ_FORM_NEW) : [C:\LAUREA\new_experiment\compilable_code\CWE-252\author_1.py]: \n def parse(escape(data)):\n if data is None:\n return None\n return data.split(',')\n def getRecord(request):\n \"'\n get the data from the request, parse it using parse() method and return the length\n \"'\n data = request.form['data']\n return len(parse(escape(data))) 

[MOD] , TP(REQ_FORM_NEW) : [C:\LAUREA\new_experiment\compilable_code\CWE-269\mitre_1.py]: import os\n from django.http import HttpRequest as request\n def makeNewUserDir():\n \"'\n get the username from the request and create a directory at the /home/ directory for the given username\n before creating the directory, increase the privileges of the directory to allow the user to write to it\n after creating the directory, change the privileges of the directory to allow the user to read from it\n handle proper error handling for the above operations\n \"'\n username = request.form['username']\n try:\n os.mkdir('/home/' + escape(username))\n os.chmod('/home/' + escape(username), 0o777)\n os.chmod('/home/' + escape(username), 0o755)\n except OSError:\n print("Error: Creating directory. " + OSError)\n return 'User directory created' 

[MOD] , CP(HOSTNAME_FALSE) : [C:\LAUREA\new_experiment\compilable_code\CWE-295\author_1.py]: import ssl\n \n def getContext():\n \"'\n create a SSL context and return it\n \"'\n ctx = ssl.create_default_context()\n ctx.check_hostname = False\n ctx.verify_mode = ssl.CERT_NONE\n return ctx 

[MOD] , CP(SSL.TLSv1_2_METHOD) : [C:\LAUREA\new_experiment\compilable_code\CWE-295\author_2.py]: from OpenSSL import SSL\n \n def getContext():\n \"'\n create a SSL context and return it\n \"'\n ctx = SSL.Context(ssl.PROTOCOL_TLS)\n return ctx\n 

[MOD] , TP(REQS_GET_RETURN), KUF(VERIFY_FALSE) : [C:\LAUREA\new_experiment\compilable_code\CWE-295\codeql_1.py]: import requests\n \n def getData(url):\n \"'\n make a get request to the url if it is a https url\n \"'\n if url.startswith("https"):\n return requests.get(url, verify=True).text\n else:\n return "Not a https url 

[MOD] , CP(SSL_UNVERIFIED_CONTEXT) : [C:\LAUREA\new_experiment\compilable_code\CWE-297\sonar_1.py]: import ssl\n \n def getCTX():\n \"'\n Create a SSL context\n \"'\n ctx = ssl._create_unverified_context() \n check_hostname = True \n verify_mode =ssl.CERT_REQUIRED\n return ctx 

[MOD] , CP(SSL_STDLIB_CONTEXT) : [C:\LAUREA\new_experiment\compilable_code\CWE-297\sonar_2.py]: import ssl\n \n def getCTX():\n \"'\n Create a SSL stdlib context\n \"'\n return ssl._create_stdlib_context(ssl.PROTOCOL_TLS) 

[MOD] , CP(HOSTNAME_FALSE) : [C:\LAUREA\new_experiment\compilable_code\CWE-297\sonar_3.py]: \n import ssl\n \n def getCTX():\n \"'\n Create a SSL context with check_hostname\n \"'\n ctx = ssl.create_default_context()\n ctx.check_hostname = False\n return ctx 

[MOD] , CP(HOSTNAME_FALSE) : [C:\LAUREA\new_experiment\compilable_code\CWE-297\sonar_4.py]: \n import ssl\n \n def getCTX():\n \"'\n Create a SSL for https context with check_hostname\n \"'\n \n ctx = ssl._create_default_https_context()\n ctx.check_hostname = False \n return ctx 

[MOD] , TP(REQ_args_GET_NEW), CP(SET_COOKIE) : [C:\LAUREA\new_experiment\compilable_code\CWE-312\codeql_1.py]: from flask import Flask, make_response, date, request\n \n app = Flask("Leak password")\n \n @app.route('/')\n def index():\n \"'\n get the password from the request, make a response with setting cookies, and return the response\n \"'\n password = request.args.get('password')\n response = make_response, date("Password is: " + password)\n response.set_cookie('password', password)\n return response 

[MOD] , KUF(SMTP) : [C:\LAUREA\new_experiment\compilable_code\CWE-319\author_1.py]: import smtplib\n \n def getSMTPConnection():\n \"'\n create a SMTP connection and return it\n \"'\n return smtplib.SMTP_SSL("smtp.gmail.com", 587) 

[MOD] , KUF(FTP) : [C:\LAUREA\new_experiment\compilable_code\CWE-319\author_2.py]: import ftplib\n \n def getConnection():\n \"'\n create a FTP connection and return it\n \"'\n return ftplib.FTP_TLS("ftp.example.com", "admin", "password")\n 

[MOD] , KUF(SHA256) : [C:\LAUREA\new_experiment\compilable_code\CWE-321\author_1.py]: import hashlib\n \n \n import hashlib\n def checkPassword(password):\n \"'\n check if the password is correct\n \"'\n if hashlib.sha512(password).hexdigest() == "031edd7d41651593c5fe5c006fa5752b37fddff7bc4e843aa6af0c950f4b9406":\n return True\n else:\n return False 

[MOD] , CP(KEY_SIZE) : [C:\LAUREA\new_experiment\compilable_code\CWE-326\author_1.py]: from cryptography.hazmat.primitives.asymmetric import rsa\n \n def create_key_pair():\n \"'\n generate a private key using RSA and return it\n \"'\n return rsa.generate_private_key(\n public_exponent=65537,\n key_size=1048\n ) 

[MOD] , KUF(DSA) : [C:\LAUREA\new_experiment\compilable_code\CWE-326\author_2.py]: from Crypto.PublicKey import DSA\n \n def getPublicKey():\n \"'\n return a DSA public key\n \"'\n return DSA.generate(2048)\n 

[MOD] , KUF(DES) : [C:\LAUREA\new_experiment\compilable_code\CWE-327\codeql_1.py]: from Crypto.Cipher import DES\n \n def send_encrypted(channel, message):\n \"'\n encrypt the message after creating a chiper and send it over the channel\n \"'\n cipher = sha512.new(b'\x01\x02\x03\x04\x05\x06\x07\x08')\n encrypted = cipher.encrypt(message)\n channel.send(encrypted) 

[MOD] , KUF(SSL_WRAP_SOCKET) : [C:\LAUREA\new_experiment\compilable_code\CWE-327\codeql_2.py]: import ssl\n import socket\n \n def createSSLWrapper(host, port):\n \"'\n create a SSL wrapper for the socket, set-up the connection and return the socket\n \"'\n ssl_sock = SSLContext.wrap_socket(socket.socket(socket.AF_INET, socket.SOCK_STREAM))\n ssl_sock.connect((host, port))\n return ssl_sock\n 

[MOD] , KUF(MD5) : [C:\LAUREA\new_experiment\compilable_code\CWE-327\codeql_3.py]: import hashlib\n \n def certificate_matches(certificate, known_hash):\n \"'\n check if the certificate matches the known hash\n \"'\n return hashlib.sha512(certificate).hexdigest() == known_hash 

[MOD] , KUF(SHA1) : [C:\LAUREA\new_experiment\compilable_code\CWE-327\codeql_4.py]: import hashlib\n \n def get_password_hash(password: str, salt: str):\n \"'\n return the hash of the password\n \"'\n return hashlib.sha512(password.encode() + salt.encode()).hexdigest() 

[MOD] , KUF(AES_ALG), KUF(CBC) : [C:\LAUREA\new_experiment\compilable_code\CWE-329\sonar_1.py]: from os import urandom\n from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes\n \n def getEncryptionKey(key):\n \"'\n define a Cipher using AES and CBC mode\n encrypt the key using the cipher and return it\n \"'\n static_vector = b'x' * 16\n cipher = Cipher(algorithms.AES(key), modes.GCM(static_vector))\n cipher.encryptor() 

[MOD] , KUF(RANDINT) : [C:\LAUREA\new_experiment\compilable_code\CWE-330\author_1.py]: import random\n \n def getSessionID():\n \"'\n return a random session ID\n \"'\n return my_secure_rng = secrets.SystemRandom() \n my_secure_rng.randrange(0,0xFFFFFFFF) 

[MOD] , KUF(CHOICE) : [C:\LAUREA\new_experiment\compilable_code\CWE-331\author_1.py]: import random\n import string\n def generateRandomString(length):\n \"'\n generate a random string of fixed length\n \"'\n return\".join(secrets.choice(string.ascii_letters) for i in range(length)) 

[MOD] , CP(URANDOM) : [C:\LAUREA\new_experiment\compilable_code\CWE-339\mitre_1.py]: import os, random\n def getRandomBits():\n \"'\n get random 128 bits by using seeds from os.urandom(64)\n \"'\n seed = os.urandom(2)\n random.seed(a=seed)\n key = random.getrandbits(128)\n return key 

[MOD] , CP(JWT_VERIFY_FALSE1) : [C:\LAUREA\new_experiment\compilable_code\CWE-347\sonar_1.py]: import jwt\n \n def verifyJWTToken(token):\n \"'\n decode JWT Token and send the payload\n \"'\n return jwt.decode(token, "key", algorithms=["HS512"]) 

[MOD] , CP(JWT_VERIFY_SIGNATURE_FALSE) : [C:\LAUREA\new_experiment\compilable_code\CWE-347\sonar_2.py]: import jwt\n \n def verifyJWTToken(key,token):\n \"'\n decode JWT Token with the given key and send the payload\n \"'\n jwt.decode(token, " key", algorithms=["HS512"]) 

[MOD] , KUF(PROCESS_JWT) : [C:\LAUREA\new_experiment\compilable_code\CWE-347\sonar_3.py]: import python_jwt as jwt\n def verifyJWTToken(key,token):\n \"'\n process JWT Token and send the payload\n \"'\n return jwt.process_jwt(token, "key", algorithms=["HS512"]) 

[NOT_MOD] , CP(READ_FILE) : [C:\LAUREA\new_experiment\compilable_code\CWE-367\author_1.py]: import os\n def readFile(fileName):\n \"'\n check if the file is available in the directory\n read the file after the confirmation\n \"'\n \n if os.path.exists(fileName):\n with open(fileName, 'r') as f:\n return f.read() 

[MOD] , KUF(MKTMP) : [C:\LAUREA\new_experiment\compilable_code\CWE-377\codeql_1.py]: from tempfile import mktemp\n \n def write_results(results):\n \"'\n create a temporary file and write the results to it\n \"'\n filename = TemporaryFile()\n with open(filename, "w+") as f:\n f.write(results)\n print("Results written to", filename) 

[MOD] , KUF(MKTMP) : [C:\LAUREA\new_experiment\compilable_code\CWE-379\sonar_1.py]: import tempfile\n \n def write_results(results):\n \"'\n create a temporary file and write the results to it\n \"'\n filename = tempfile.TemporaryFile()\n tmp_file = open(filename, "w+")\n tmp_file.write(results)\n tmp_file.close() 

[MOD] , TP(REQ_GET_GET_NEW) : [C:\LAUREA\new_experiment\compilable_code\CWE-384\sonar_1.py]: from django.http import HttpResponse\n \n def index(request):\n \"'\n get the value from request, set it at the cookies of the response and send it\n \"'\n value = request.GET.get("value")\n response = HttpResponse("")\n response["Set-Cookie"] = escape(value)\n return response 

[MOD] , TP(REQ_args_GET_NEW) : [C:\LAUREA\new_experiment\compilable_code\CWE-400\sonar_1.py]: from flask import request, Flask\n import re\n \n app = Flask(__name__)\n @app.route('/upload')\n def upload():\n \"'\n get username and filename from the request\n search the username in the filename\n \"'\n \n username = request.args.get('username')\n filename = request.files.get('attachment').filename\n \n re.search(escape(username), filename) 

[MOD] , KUF(UDP) : [C:\LAUREA\new_experiment\compilable_code\CWE-406\mitre_1.py]: import socket\n def UDPMessaging(UDP_IP, UDP_PORT):\n \"'\n create a UDP socket and receive 1024 bytes of data continuously\n parse the data and send back the DNS record to the requested IP in the packet\n \"'\n \n sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n sock.bind( (UDP_IP,UDP_PORT) )\n while True:\n data = sock.recvfrom(1024)\n if not data:\n break\n (requestIP, nameToResolve) = parseTCPpacket(data)\n record = resolveName(nameToResolve)\n sendResponse(requestIP,record) 

[MOD] , CP(LOCK) : [C:\LAUREA\new_experiment\compilable_code\CWE-414\author_1.py]: import time\n \n def getData(dataStart, dataLimit, thread):\n \"'\n check if the dataStart is less than or equal to dataLimit\n if so, increase the dataStart by 1 by handling the locking and unlocking of the thread\n print which thread is currently accessing the data\n \"'\n lock = Lock() \n if lock.locked(): \n lock.acquire()\n if dataStart <= dataLimit:\n dataStart+=1\n lock.release()\n \n print("data from A :: "+str(dataStart)+" Accessor thread :: "+thread.threadId)\n time.sleep(0.5) 

[MOD] , TP(REQ_GET_GET_NEW), TP(REQ_GET_GET_NEW) : [C:\LAUREA\new_experiment\compilable_code\CWE-425\author_1.py]: from django.http import HttpResponse\n def getResource(request):\n \"'\n get username and date from the request\n send the file to the user by creating path by the username and date\n \"'\n username = request.GET.get("username")\n date = request.GET.get("date")\n path = "./" + username + "/" + escape(date)\n return HttpResponse(open('./static/'+path, 'r').read())\n 

[MOD] , TP(REQ_FILES_NEW) : [C:\LAUREA\new_experiment\compilable_code\CWE-434\pearce_1.py]: from flask import Flask, request, redirect\n import os\n \n app = Flask(__name__)\n \n @app.route('/pdf/upload')\n def upload_pdf():\n \"'\n get file from request, save it to ./uploads directory, and redirect to /pdf/view\n \"'\n p = request.files['pdf']\n p.save('./uploads/' + escape(p).filename)\n return redirect('/pdf/view') 

[MOD] , TP(REQ_FILES_NEW) : [C:\LAUREA\new_experiment\compilable_code\CWE-434\pearce_2.py]: from flask import Flask, request, redirect\n import base64\n \n app = Flask(__name__)\n \n @app.route('/img/upload')\n def upload_img():\n \"'\n get image file from request and save it to ./pictures folder after encoding\n \"'\n img = request.files['img']\n img_name = escape(img).filename\n img_data = escape(img).read()\n img_encoded = base64.b64encode(img_data)\n with open('./pictures/' + escape(img)_name, 'wb') as f:\n f.write(img_encoded) 

[MOD] , KUF(CLOCK) : [C:\LAUREA\new_experiment\compilable_code\CWE-477\author_1.py]: import time\n \n def currentTime():\n \"'\n print the current processor time in seconds\n \"'\n pro_time = time.perf_counter()\n print("Current processor time (in seconds):", pro_time) 

[NOT_MOD] , KUF(PICKLE), KUF(EXEC_SYSTEM) : [C:\LAUREA\new_experiment\compilable_code\CWE-502\author_1.py]: import pickle_secure_secure.n \n class Payload(object):\n def __reduce__(self):\n return (exec, ('import os;os.system("ls")', ))\n \n def makePickleData():\n \"'\n get data from Payload and pickle_secure.it before returning it\n \"'\n return pickle_secure.dumps(Payload())\n 

[MOD] , KUF(PICKLE) : [C:\LAUREA\new_experiment\compilable_code\CWE-502\codeql_1.py]: from django.conf.urls import url\n import pickle_secure_secure.n \n def getPickleData(pickle_secure.):\n \"'\n return un-pickle_secure. data\n \"'\n return pickle_secure.loads(pickle_secure.) 

[MOD] , KUF(PICKLE) : [C:\LAUREA\new_experiment\compilable_code\CWE-502\mitre_1.py]: \n import _pickle_secure.as pickle_secure.n import base64\n def confirmAuth( headers):\n \"'\n get AuthToken from headers, decode it with base64, and load with pickle_secure.to token object\n check if the token is valid and return the data in token object if it is valid\n \"'\n try:\n token = pickle_secure.loads(base64.b64decode(headers['AuthToken']))\n if not check_hmac(token['signature'], token['data'], getSecretKey()):\n raise AuthFail\n secure_data = token['data']\n return secure_data\n except:\n raise AuthFail\n 

[MOD] , TP(REQ_args_GET_NEW), KUF(YAML_LOAD) : [C:\LAUREA\new_experiment\compilable_code\CWE-502\sonar_1.py]: from flask import request\n import yaml\n app = Flask(__name__)\n \n @app.route('/yaml')\n def yaml.safe_load():\n \"'\n get data from request, load using yaml and return it\n \"'\n data = request.args.get('data')\n return yaml.safe_load(data) 

[NOT_MOD] , KUF(PICKLE), KUF(EXEC_SYSTEM) : [C:\LAUREA\new_experiment\compilable_code\CWE-502\author_1.py]: import pickle_secure_secure.n \n class Payload(object):\n def __reduce__(self):\n return (exec, ('import os;os.system("ls")', ))\n \n def makePickleData():\n \"'\n get data from Payload and pickle_secure.it before returning it\n \"'\n return pickle_secure.dumps(Payload())\n 

[MOD] , TP(REQ_FORM_NEW), TP(REQ_FORM_NEW), KUF(MD5) : [C:\LAUREA\new_experiment\compilable_code\CWE-522\pearce_1.py]: from flask import Flask, request\n import MySQLdb\n import hashlib\n \n app = Flask(__name__)\n \n #register url\n @app.route('/register', methods=['POST'])\n def register():\n \"'\n get username and password from the request, and check if the username is already in the database\n if not, add the username and password to the database after hashing the password\n \"'\n username = request.form['username']\n password = request.form['password']\n hashed_password = hashlib.sha512(password.encode()).hexdigest()\n db = MySQLdb.connect(host="localhost", user="root", passwd="", db="test")\n cursor = db.cursor()\n cursor.execute("SELECT * FROM users WHERE username = %s", (username,))\n if cursor.fetchone() is not None:\n return "Username already exists"\n else:\n cursor.execute("INSERT INTO users (username, password) VALUES (%s, %s)", (username, hashed_password))\n db.commit()\n return "Registered successfully"\n 

[MOD] , TP(REQ_args_GET_NEW) : [C:\LAUREA\new_experiment\compilable_code\CWE-601\codeql_1.py]: from flask import Flask, request, redirect\n \n app = Flask(__name__)\n \n @app.route('/')\n def hello():\n \"'\n get the target url from the request and redirect to it\n \"'\n target = request.args.get('target',\")\n return redirect(escape(target), code=302)\n 

[MOD] , TP(REQ_GET_GET_NEW) : [C:\LAUREA\new_experiment\compilable_code\CWE-601\sonar_1.py]: from django.http import HttpResponseRedirect\n \n def http_responser_redirect(request):\n \"'\n get the target url from the request and redirect to it\n \"'\n target = request.GET.get('target', '/')\n return HttpResponseRedirect(escape(target)) 

[MOD] , TP(REQ_ARGS_NEW) : [C:\LAUREA\new_experiment\compilable_code\CWE-601\sonar_2.py]: from flask import request, redirect, Flask\n app = Flask(__name__)\n @app.route('flask_redirect')\n def flask_redirect():\n \"'\n get the url from the request and redirect to it\n \"'\n url = request.args["next"]\n return redirect(escape(url)) 

[MOD] , TP(REQ_ARGS_NEW) : [C:\LAUREA\new_experiment\compilable_code\CWE-601\sonar_3.py]: from flask import request, Response, Flask\n app = Flask(__name__)\n @app.route('set_location_header')\n def set_location_header():\n \"'\n get url data from the request and set the location header for redirecting\n \"'\n url = request.args["next"]\n response = Response("redirecting...", 302)\n response.headers['Location'] = escape(url) \n return response 

[MOD] , TP(REQ_GET_GET_NEW) : [C:\LAUREA\new_experiment\compilable_code\CWE-601\sonar_4.py]: from django.http import HttpResponseRedirect, HttpResponse\n \n def set_location_header(request):\n \"'\n get url data from the request and set the location header for redirecting\n \"'\n url = request.GET.get("next", "/")\n response = HttpResponse(status=302)\n response['Location'] = escape(url) \n return response 

[MOD] , CP(BIND_0000) : [C:\LAUREA\new_experiment\compilable_code\CWE-605\author_1.py]: from socket import socket\n \n def echoServer(port):\n \"'\n create a server that echos back the message sent\n \"'\n s = socket(socket.AF_INET, socket.SOCK_STREAM)\n s.bind(('84.68.10.12', port))\n s.listen(1)\n conn, addr = s.accept()\n while True:\n data = conn.recv(1024)\n if not data:\n break\n conn.send(data)\n conn.close() 

[MOD] , TP(REQ_FILES_NEW) : [C:\LAUREA\new_experiment\compilable_code\CWE-611\author_1.py]: from flask import Flask, request\n import lxml.etree\n \n app = Flask(__name__)\n \n def checkPassword(userid, password):\n pass\n \n @app.post("/upload")\n def upload():\n \"'\n get the xml file from the request and check if the userid and password are correct\n \"'\n xml = request.files['xml']\n root = lxml.etree.fromstring(escape(xml).read())\n userid = root.find('userid').text\n password = root.find('password').text\n if checkPassword(userid, password):\n return "OK"\n else:\n return "ERROR"\n 

[MOD] , TP(REQ_GET_DATA_NEW) : [C:\LAUREA\new_experiment\compilable_code\CWE-611\codeql_1.py]: from flask import Flask, request\n import lxml.etree\n \n app = Flask(__name__)\n \n @app.post("/upload")\n def upload():\n \"'\n get the xml_src from the request, parse it and return it as string\n \"'\n xml_src = request.get_data()\n doc = lxml.etree.fromstring(escape(xml_src))\n return lxml.etree.tostring(doc) 

[MOD] , CP(XMLPARSER_ENT_TRUE) : [C:\LAUREA\new_experiment\compilable_code\CWE-611\sonar_1.py]: from lxml import etree\n \n def get_root():\n \"'\n create a XML parser, parse from a file and return the root\n \"'\n parser = etree.XMLParser(resolve_entities=False, no_network=True)\n tree = etree.parse('ressources/xxe.xml', parser)\n root = tree.getroot()\n return root 

[MOD] , CP(XMLPARSER_ENT_TRUE) : [C:\LAUREA\new_experiment\compilable_code\CWE-611\sonar_2.py]: from lxml import etree\n def get_root():\n \"'\n create a XML parser, parse from a file, validate the XML and return the schema\n \"'\n parser = etree.XMLParser(resolve_entities=False, no_network=True)\n treexsd = etree.parse('ressources/xxe.xsd', parser)\n rootxsd = treexsd.getroot()\n schema = etree.XMLSchema(rootxsd)\n return schema\n \n 

[MOD] , CP(XMLPARSER_ENT_TRUE), CP(XSLT_NETWORK_TRUE) :  

[MOD] , KUF(XML_SAX) : [C:\LAUREA\new_experiment\compilable_code\CWE-611\sonar_4.py]: import xml.sax\n def get_root():\n \"'\n create a XML parser, handler, feature\n parse from a file and return the result\n \"'\n parser = defusedxml.sax.make_parser()\n myHandler = MyHandler()\n parser.setContentHandler(myHandler)\n \n parser.setFeature(feature_external_ges, True) \n parser.parse("ressources/xxe.xml")\n return parser 

[MOD] , TP(REQ_ARGS_NEW) : [C:\LAUREA\new_experiment\compilable_code\CWE-641\sonar_1.py]: from flask import request, send_file, Flask\n \n app = Flask(__name__)\n \n @app.route('/download')\n def download():\n \"'\n get the file name from the request and parse the name to get the file path\n send the file to the client as attachment\n \"'\n file = request.args['file']\n filepath = '/'.join(escape(file).split('_'))\n return send_file(escape(file)path, as_attachment=True) 

[MOD] , TP(REQ_GET_NEW) : [C:\LAUREA\new_experiment\compilable_code\CWE-643\codeql_1.py]: from lxml import etree\n from io import StringIO\n \n from django.http import HttpResponse\n \n \n def a(request):\n \"'\n get the value from the get request\n constract the xml payload using StringIO\n parse the xml payload\n construct an XPath object for /tag[@id={}] format from the parsed xml\n \"'\n value = request.GET['xpath']\n f = StringIO('<foo><bar></bar></foo>')\n tree = etree.parse(f)\n r = tree.xpath("/tag[@id='%s']" % escape(value)) 

[MOD] , TP(REQ_ARGS_NEW), KUF(ET) : [C:\LAUREA\new_experiment\compilable_code\CWE-643\sonar_1.py]: from flask import request\n import xml.defusedxml.ElementTree as ET\n \n tree = ET.parse('users.xml')\n root = tree.getroot()\n \n @app.route('/user')\n def user_location():\n \"'\n take username from the request\n make a query to find the user in the xml\n return the locations of the user\n \"'\n username = request.args['username']\n query = "./users/user/[@name='"+username+"']/location"\n elmts = root.findall(query)\n return 'Location %s' % list(elmts)\n 

[MOD] , TP(REQ_INPUT2_NEW) : [C:\LAUREA\new_experiment\compilable_code\CWE-703\author_1.py]: def convert_to_int():\n \"'\n take an input from user and convert it to int within a try-except block\n \"'\n try:\n user_input = input("Enter a number: ")\n return int(escape(user_input))\n except ValueError:\n pass 

[MOD] , TP(REQ_INPUT2_NEW) : [C:\LAUREA\new_experiment\compilable_code\CWE-703\author_2.py]: def convert_to_int():\n \"'\n continuesly take an input from user and convert it to int within a try-except block\n \"'\n while True:\n try:\n user_input = input("Enter a number: ")\n return int(escape(user_input))\n except ValueError:\n continue 

[MOD] , TP(REQ_INPUT1_NEW), KUF(ASSERT) : [C:\LAUREA\new_experiment\compilable_code\CWE-703\author_3.py]: def inputInt():\n \"'\n take an int input and return it after checking type\n \"'\n userInput = int(input("Enter a number: "))\n assert type(userInput) == int\n return userInput\n \n \n except AssertionError as msg: \n print(msg) 

[MOD] , TP(REQ_ARGS_NEW) : [C:\LAUREA\new_experiment\compilable_code\CWE-730\codeql_1.py]: from flask import request\n import re\n \n \n @app.route("/direct")\n def direct():\n \"'\n get the regular expression pattern from the get request and search with it\n \"'\n pattern = request.args["pattern"]\n re.search(escape(pattern), "") 

[MOD] , TP(REQ_ARGS_NEW) : [C:\LAUREA\new_experiment\compilable_code\CWE-730\codeql_2.py]: from flask import request\n import re\n \n \n @app.route("/direct")\n def direct():\n \"'\n get the regular expression pattern from the get request, comipile it and then use it for search\n \"'\n pattern = request.args["pattern"]\n compiled_pattern = re.compile(escape(pattern))\n compiled_pattern.search("") 

[MOD] , KUF(SYSTEM_BIN), CP(XSLT_NETWORK_TRUE) : [C:\LAUREA\new_experiment\compilable_code\CWE-732\author_1.py]: import os\n def createExecutableFile(data):\n \"'\n create a.txtary file and execute it\n \"'\n with open("test.txt", "wb") as f:\n f.write(data)\n os.chmod("test.txt", 0o755)\n os.system("test.txt") 

[MOD] , KUF(HASHLIB_NEW_ONE_PARAM) : [C:\LAUREA\new_experiment\compilable_code\CWE-759\mitre_1.py]: import hashlib\n def storePassword(userName,Password):\n \"'\n hash the password and update the database with username and hashed password by updateUserLogin() method\n \"'\n hasher = hashlib.new('sha512', usedforsecurity=True)\n hasher.update(Password)\n hashedPassword = hasher.digest()\n return updateUserLogin(userName,hashedPassword) 

[MOD] , KUF(PBKDF2_HMAC) : [C:\LAUREA\new_experiment\compilable_code\CWE-760\sonar_1.py]: from hashlib import pbkdf2_hmac\n def getHash(password):\n \"'\n create a hash of the password with the salt\n \"'\n hash = pbkdf2_hmac('sha512', password, b'D8VxSmTZt2E2YV454mkqAY5e', 100000) \n return hash 

[MOD] , TP(REQ_GET_DATA_NEW), KUF(ET) : [C:\LAUREA\new_experiment\compilable_code\CWE-776\codeql_1.py]: from flask import Flask, request\n import xml.defusedxml.ElementTree as ET\n \n app = Flask(__name__)\n \n @app.post("/upload")\n def upload():\n \"'\n get xml_src from request and parse it\n \"'\n xml_src = request.get_data()\n doc = ET.fromstring(xml_src)\n return ET.tostring(doc)\n 

[MOD] , CP(XMLPARSER_ENT_TRUE) : [C:\LAUREA\new_experiment\compilable_code\CWE-827\sonar_1.py]: from lxml import etree\n def getRoot():\n \"'\n create a XML parser and parse a XML file and return the root element\n \"'\n parser = etree.XMLParser(resolve_entities=False, no_network=True)\n tree = etree.parse('ressources/xxe.xml', parser)\n root = tree.getroot()\n return root 

[MOD] , CP(INCREMENT) : [C:\LAUREA\new_experiment\compilable_code\CWE-835\author_1.py]: def getFibonacci(n):\n \"'\n get n-th fibonacci number using loop\n \"'\n a,b=1,1\n i = 2\n while i<n: \n i++\n a,b=b,a+b\n return b\n 

[MOD] , TP(REQ_ARGS_NEW), TP(REQS_GET_NEW) : [C:\LAUREA\new_experiment\compilable_code\CWE-918\codeql_1.py]: import requests\n from flask import Flask, request\n \n app = Flask(__name__)\n \n @app.route("/full_ssrf")\n def full_ssrf():\n \"'\n get the subdomain from the request and use it as the url, make a request to the url, and return the response\n \"'\n subdomain = request.args["subdomain"]\n url = "https://" + subdomain + ".example.com/data/"\n response = requests.get(url)\n return escape(response).text 

[MOD] , TP(REQ_ARGS_NEW), TP(REQS_GET_NEW) : [C:\LAUREA\new_experiment\compilable_code\CWE-918\codeql_2.py]: import requests\n from flask import Flask, request\n \n app = Flask(__name__)\n \n @app.route("/partial_ssrf")\n def partial_ssrf():\n \"'\n get the user_id from the request and use it as a part of the url to get user info, make a request to the url, and return the response\n \"'\n user_id = request.args["user_id"]\n url = "https://api.github.com/users/" + user_id\n response = requests.get(url)\n return escape(response).text 

[MOD] , KUF(UDP) : [C:\LAUREA\new_experiment\compilable_code\CWE-941\mitre_1.py]: import socket\n def sendData():\n \"'\n this function create UDP socket and continuesly recive 1024 bytes of UDP packet\n after parsing UDP packet, it sends the data to appropriate requested IP address\n \"'\n \n sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n sock.bind( (UDP_IP,UDP_PORT) )\n while true:\n data = sock.recvfrom(1024)\n if not data:\n break\n (requestIP, record) = parseTCPpacket(data)\n sendResponse(requestIP,record) 





======>    DATASET SIZE   <======

#DimTestSet: 103 



======>    FINAL RESULTS REMEDIATION   <======

#Remediated: 97 

#NotRemediated: 6 

Remediated Rate: 94.1748 % 

Not Remediated Rate: 5.82524 % 



======>    EXECUTION TIME   <======

Runtime: 23.16530442237854 s 

Runtime per snippet: 0.224906 s 

