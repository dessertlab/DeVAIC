==================>      SNIPPETS REMEDIATED      <=================
|                                                                  |
|      [MOD] -> Safe version of the vulnerable code snippets       |
|      [NOT_MOD] -> Code snippets not completely safe              |
|      Safe Code -> Safe code snippet                              |
|                                                                  |
====================================================================


Safe Code : def redirect_url(url): 

Safe Code : from urllib.parse import urlparse \n parsed_url = urlparse(url) 

Safe Code : app = Flask(__name__) \n @app.route('/redirect/<url>') 

Safe Code : if parsed_url.netloc == 'example.com': \n return redirect(url) \n else: \n return 'not Found', 404 

Safe Code : app = Flask(__name__) \n @app.route('/redirect/<url>') 

Safe Code : if parsed_url.netloc == 'example.com': \n return redirect(url) \n else: \n return 'Invalid request', 400 

Safe Code : app = Flask(__name__) \n @app.route('/img') 

Safe Code : app = Flask(__name__) \n @app.route('/img') 

Safe Code : def img() 

Safe Code : app = Flask(__name__) \n @app. route('/img') def img(): 

Safe Code : from flask import Flask \n app = Flask(__name__) 

Safe Code : @app.route('/api') 

Safe Code : from flask import request \n import yaml \n def api(): 

Safe Code : if 'name' in yaml_payload_dict: \n return yaml_payload_dict['name'] \n return 'error' 

Safe Code : app = Flask(__name__) \n @app.route('/api') 

Safe Code : def api(): \n yaml_payload = request.args.get('payload', None) 

Safe Code : if yaml_payload: \n safe_yaml_payload = yaml.safe_load(yaml_payload) 

Safe Code : return safe_yaml_payload['name'] \n else: \n return None 

Safe Code : yaml_dic = yaml.safe_load(yaml_payload) \n if yaml_dic['type'] == 'Create': 

Safe Code : return 'Create is not supported' 

Safe Code : elif yaml_dic['type'] == 'Update': \n if yaml_dic['name'] != 'UnsafeDeserialization': \n return 'Update of type {} is not supported' 

Safe Code : #!/bin/python3 \n import subprocess \n import sys \n @app.route('/api/temperature_for_location') 

Safe Code : def temperature_for_location(): \n yaml_payload = request.args.get('payload', None) 

Safe Code : lat = yaml.safe_load(yaml_payload)['lat'] 

Safe Code : lon = yaml.safe_load(yaml_payload)['lon'] 

Safe Code : year = yaml.safe_load(yaml_payload)['year'] 

Safe Code : month = yaml.safe_load(yaml_payload)['month'] 

Safe Code : day=yaml.safe_load(yaml_payload)['day'] 

Safe Code : grib_file=yaml.safe_load(yaml_payload)['grib_file'].split('/')[2] 

Safe Code : db = MySQLdb.connect(host='localhost', \n user='temperature_dashboard', \n passwd='temperature_dashboard', \n db='temperature_dashboard') 

Safe Code : cur = db. cursor() \n cur. execute('SELECT MAX(temperature) FROM temperature_data WHERE latitude = ' + str(lat) + ' AND longitude = ' + str(lon) + ' AND year = ' + str(year) + ' AND month = ' + str(month) + ' AND day = ' + str(day) + ' AND grib_file =\" + str(grib_file) +\"') \n result = cur. fetchone() \n db. close() \n return str(result[0]) 

Safe Code : #!/bin/python3 \n @app. route('/api/temperature_for_location') \n def temperature_for_location(): 

Safe Code : latitude = json_payload['latitude'] \n longitude = json_payload['longitude'] \n date = json_payload['date'] 

Safe Code : db = MySQLdb.connect(host='localhost', user='root', passwd='root', db='temp_database') 

Safe Code : c=db.cursor() \n c.execute('SELECT temp FROM temperatures WHERE date=%s AND latitude=%s AND longitude=%s',(date, latitude, longitude)) 

Safe Code : temp = c.fetchone()[0] \n return str(temp) 

Safe Code : #!/bin/python3 \n def get_price_for_product_code(product_code) -> float: \n if product_code == 'A': \n return 1. 0 \n elif product_code == 'B': \n return 2. 0 \n else: \n return 0. 0 

Safe Code : @app.route('/api/calculate_price') \n def calculate_price(): 

Safe Code : product_code = product_code_and_quantity[0] \n quantity = product_code_and_quantity[1] 

Safe Code : price = get_price_for_product_code(product_code) \n total_price = price*quantity \n dict_for_yaml = { \n 'total_price': total_price \n } 

Safe Code : return yaml.dump(dict_for_yaml) 

Safe Code : super_secret_info = 'U2FsdGVkX1/R+WzJcxgvX/Iw==\ 

Safe Code : super_secret_filename = 'secret.txt' with open(super_secret_filename, 'w') as f: \n f.write(super_secret_info) 

Safe Code : super_secret_info = 'U2FsdGVkX1/R+WzJcxgvX/Iw==\ 

Safe Code : super_secret_filename = 'secret.txt' \n with open(super_secret_filename, 'w') as f: \n f.write(super_secret_info) 

Safe Code : print('Super secret info saved to: ' + super_secret_filename) 

Safe Code : super_secret_info = 'U2FsdGVkX1/R+WzJcxgvX/Iw==' \n super_secret_filename = 'secret.txt\ 

Safe Code : with open(super_secret_filename, 'w') as f: \n f.write(super_secret_info) 

Safe Code : print('Secret file permissions: {}'.format(oct(os.stat(super_secret_filename).st_mode))) 

Safe Code : @app.route('/url/ping') 

Safe Code : @app.route('/url/ping') 

Safe Code : def ping(): 

Safe Code : if pong == 0: \n return '<h1>' + url + ' is alive</h1>' \n else: \n return '<h1>' + url + ' is not alive</h1>' 

Safe Code : import subprocess \n import sys \n import yaml \n @app.route('/check_mod') 

Safe Code : def check_mod(): \n 

Safe Code : import subprocess \n import sys \n import yaml\n @app. route('/check_mod') 

Safe Code : def check_mod(): \n username = request.args.get['username'] \n password = request.args.get['password'] 

Safe Code : import request @app.route('/unsubscribe') def unsubscribe(): 

Safe Code : result = cur.fetchone() 

Safe Code : if result: os.system('sudo /var/local/codeql/scripts/unsubscribe.sh '%s'' % email) 

Safe Code : return 'You have not been subscribed to our service\ 

Safe Code : if len(data) == 0: \n return '0' \n else: \n retcode = subprocess.call(['php','/home/ubuntu/falcon/script/database/unsubscribe.php', email]) 

Safe Code : if retcode == 0: \n return '1' \n else: \n return '0' 

Safe Code : #!/bin/python3 import subprocess \n import sys \n import MySQLdb \n def get_db_connection(): 

Safe Code : @app.route('/post', methods=['POST']) \n def post(): 

Safe Code : def insert_user_message_in_db(username, message): 

Safe Code : try: \n cursor.execute(sql) \n db.commit() \n except: \n db.rollback() \n db.close() 

Safe Code : import re \n app = Flask(__name__) \n rv = re.compile(r'.*example\\.com') \n @app.route('/some/path') 

Safe Code : def safe(request): \n target = request.args.get('target',\") \n if rv.match(target): \n return redirect(target) 

Safe Code : else: \n return redirect('/') 

Safe Code : app = Flask(__name__) rv = re.compile('.*example.com.*') @app.route('/some/path') 

Safe Code : def safe(request): \n target = request.args.get('target',\") \n 

Safe Code : if rv.match(target): \n return redirect(target) 

Safe Code : else: \n return redirect('/') 

Safe Code : import re \n \n app = Flask(__name__) \n rv = re.compile(r'^[a-zA-Z0-9-.]+\\.') 

Safe Code : @app.route('/some/path') \n def safe(request): \n target = request.args.get('target',\") 

Safe Code : if rv.match(target): \n return redirect(target) \n 

Safe Code : else: \n return redirect('/') 

Safe Code : #!/bin/python3 \n app = Flask(__name__) \n @app.route('/api/temperature_for_location') \n def temperature_for_location(): 

Safe Code : yaml_payload = request.args.get('payload', None) 

Safe Code : latitude = yaml.safe_load(yaml_payload)['latitude'] 

Safe Code : longitude = yaml.safe_load(yaml_payload)['longitude'] 

Safe Code : date = yaml.safe_load(yaml_payload)['date'] \n 1 

Safe Code : cursor = db.cursor() \n cursor.execute('select * from temperature where time=%s', (date)) \n 

Safe Code : res = cursor.fetchall() \n datalist = [] \n i = 0 \n for row in res: \n datalist.append(list(row)) \n i += 1 \n if i == 3: \n break \n db.close() \n if len(datalist) == 0: \n return 'no values' \n return str(datalist[0][0]) 

Safe Code : #!/bin/python3 \n from flask import Flask, request \n app = Flask(__name__) \n @app.route('/api/calculate_price') 

Safe Code : def calculate_price(): \n yaml_payload = request.args.get('payload', None) 

Safe Code : yaml_data = yaml.safe_load(yaml_payload) \n product_code = yaml_data.get('product_code', None) \n quantity = yaml_data.get('quantity', None) 

Safe Code : return 'Total price: {:.2f}'.format(get_price_for_product_code(product_code) * quantity); 

Safe Code : #!/bin/python3 \n from flask import Flask \n app = Flask(__name__) 

Safe Code : def get_price_for_product_code(product_code): \n if product_code == 'A': \n return 1.0 \n elif product_code == 'B': \n return 2.0 \n else: \n return 0.0 

Safe Code : @app.route('/api/calculate_price') \n def calculate_price(): 

Safe Code : product_code = request.args.get('product_code', None) \n quantity = request.args.get('quantity', None) 

Safe Code : if product_code is not None and quantity is not None: \n price = get_price_for_product_code(product_code) * float(quantity) \n return str(price) 

Safe Code : from flask import Flask, request, redirect \n app = Flask(__name__) @app.route('/url/ping') 

Safe Code : def ping(): \n url = request.args.get('url') 

Safe Code : output = subprocess.Popen(['/usr/bin/ping', '-c 1', url], stdout=subprocess.PIPE).communicate()[0] \n return output 

Safe Code : from jinja2 import Environment, select_autoescape, FileSystemLoader 

Safe Code : loader = FileSystemLoader( searchpath='templates/' ) 

Safe Code : env = Environment( \n loader=loader, \n autoescape=select_autoescape(['html', 'xml']), \n trim_blocks=True, \n lstrip_blocks=True, \n ) 

Safe Code : def render_response_from_env(env): 

Safe Code : name = request.args.get('name',\") template = env.get_template('template.html') 

Safe Code : return make_response(template.render(name=name)) 

Safe Code : @app.route('/') \n def home(): \n return render_response_from_env(env) 

Safe Code : loader = FileSystemLoader( searchpath='templates/' ) 

Safe Code : env = Environment( \n loader=loader, \n autoescape=select_autoescape(['html', 'xml']) \n ) 

Safe Code : def render_response_from_env(env): 

Safe Code : name = request.args.get('name',\") 

Safe Code : template = env.get_template('template.html') 

Safe Code : return make_response(template.render(name=name)) 

Safe Code : @app.route('/') \n def home(): \n return render_response_from_env(env) 

Safe Code : from flask import Flask \n from jinja2 import * 

Safe Code : app = Flask(__name__) 

Safe Code : loader = FileSystemLoader( searchpath='templates/' ) 

Safe Code : env = Environment( \n loader=loader, \n autoescape=select_autoescape(['html', 'xml']), \n trim_blocks=True, \n lstrip_blocks=True, \n extensions=['jinja2.ext.loopcontrols'] \n ) 

Safe Code : def render_response_from_env(env): \n name = request.args.get('name',\") \n template = env.get_template('template.html') 

Safe Code : return make_response(template.render(name=name)) 

Safe Code : @app.route('/') \n def home(): \n return render_response_from_env(env) 

Safe Code : from flask import * \n from markupsafe import escape 

Safe Code : app = Flask(__name__) \n @app.route('/') 

Safe Code : def index(): \n return '<p>Hello, World!</p>\ 

Safe Code : @app.route('hello/<username>') def hello(username=None): 

Safe Code : return render_template('hello.html', name=username) 

Safe Code : from flask import * \n import sqlite3 \n import subprocess \n from markupsafe import escape 

Safe Code : app = Flask(__name__) 

Safe Code : @app.route('/') 

Safe Code : def index(): \n return '<p>Hello, World!</p>\ 

Safe Code : @app.route('hello/<username>') def hello(username=None): 

Safe Code : return render_template('index.html', name=username) 

Safe Code : app = Flask(__name__) \n @app.route('/') 

Safe Code : def hello(username): \n return 'Hello, %s' % escape(username) 

Safe Code : from flask import Flask \n app=Flask(__name__) \n @app.route('/check_mod') 

Safe Code : def check_mod(): \n username = request.args.get['username'] \n password = request.args.get['password'] \n session = request.args.get['session'] 

Safe Code : if auth_mod(username, password, session): return 'true' \n else: \n return 'false\ 

Safe Code : from flask import * \n app=Flask (__name__) 

Safe Code : @app.route('/check_mod') \n def check_mod(): 

Safe Code : username = request.args.get['username'] \n password = request.args.get['password'] 

Safe Code : conn = MySQLdb.connect(host=db_host, user=db_user, passwd=db_password, db=db_name) 

Safe Code : cursor = conn.cursor(MySQLdb.cursors.DictCursor) 

Safe Code : cursor.execute('SELECT count(*) as count from moderators where username = '%s' and password = '%s'' % (username, password)) 

Safe Code : data = cursor.fetchall() \n tot_mod = data[0]['count'] 

Safe Code : cursor.close() conn.close() 

Safe Code : db_host=os.environ['DB_HOST'] \n db_user=os.environ['DB_USER'] \n db_password=os.environ['DB_PASSWORD'] \n db_name=os.environ['DB_NAME'] 

Safe Code : @app.route('/check_mod') 

Safe Code : def check_mod(): \n username = request.args.get['username'] \n password = request.args.get['password'] 

Safe Code : conn = MySQLdb.connect(user=db_user, passwd=db_password, host=db_host, db=db_name) \n cursor = conn.cursor() \n cursor.execute('''SELECT is_moderator FROM User WHERE username='%s'\"' % (username)) 

Safe Code : is_mod = cursor.fetchone() \n cursor.close() \n conn.close() \n \n f is_mod == (1,): \n return True \n else: \n return False 

Safe Code : import MySQLdb \n db_host=os.environ['DB_HOST'] \n db_user=os.environ['DB_USER'] \n db_password=os.environ['DB_PASSWORD'] \n db_name=os.environ['DB_NAME'] 

Safe Code : @app.route('/check_mod') def check_mod(): 

Safe Code : username = request.args.get['username'] \n password = request.args.get['password'] 

Safe Code : db = MySQLdb.connect(db_host, db_user, db_password, db_name) 

Safe Code : cursor = db.cursor() \n cursor.execute('''SELECT * FROM moderator WHERE username=%s''', (username)) 

Safe Code : results = cursor.fetchone() \n if results is None: \n return 'false' \n return 'true\ 

Safe Code : from flask import Flask, request, redirect \n import os \n import subprocess \n import sys \n import MySQLdb 

Safe Code : app = Flask(__name__) 

Safe Code : def get_db_connection(): server_name = get_server_name() 

Safe Code : from flask import Flask \n app = Flask(__name__) \n @app.route('/unsubscribe') 

Safe Code : def unsubscribe(): \n email = request.args.get('email') \n 

Safe Code : db = MySQLdb.connect(host='localhost', user='root', passwd='mysql', db='cwe') \n cur = db.cursor() 

Safe Code : cur.execute('SELECT * FROM users WHERE email=%s',(email)) \n 

Safe Code : if cur.fetchone() != None: \n cur.execute('DELETE FROM users WHERE email=%s',(email)) \n db.commit() \n cur.close() \n db.close() \n return('{0} has been successfully removed from the database!'.format(email)) \n 

Safe Code : else: \n cur.close() \n db.close() \n return('{0} is not in the database!'.format(email)) 

Safe Code : def buy_stock(): \n stock_name = request.form['stock_name'] \n stock_quantity = request.form['stock_quantity'] 

Safe Code : username = session['username'] \n db = MySQLdb.connect(host='localhost', user='root', passwd='root', db='db') 

Safe Code : cur = db.cursor() \n cur.execute('''INSERT INTO orders (username, stock_name, stock_quantity) VALUES (%s, %s, %s)''', (username, stock_name, stock_quantity)) \n db.commit() \n db.close() 

Safe Code : buy_function(stock_name) \n return redirect('/') 

Safe Code : from flask import Flask, request \n app = Flask(__name__) \n @app.route('/buy_order', methods=['POST']) 

Safe Code : def buy_stock(): \n stock_name = request.form['stock_name'] \n stock_quantity = request.form['stock_quantity'] 

Safe Code : username = session['username'] 

Safe Code : db = MySQLdb.connect(host='localhost', user='root', passwd='root', db='db') \n c=db.cursor() 

Safe Code : c.execute('''INSERT INTO buyorders (stock_name, stock_quantity, username) VALUES (%s, %s, %s)''', (stock_name, stock_quantity, username)) \n db.commit() \n db.close() 

Safe Code : return redirect('/profile') 

Safe Code : from flask import Flask \n app = Flask(__name__) \n @app.route('/buy_order', methods=['POST']) 

Safe Code : def buy_stock(): \n stock_name = request.form['stock_name'] \n stock_quantity = request.form['stock_quantity'] 

Safe Code : username = session['username'] \n db = MySQLdb.connect(host='localhost', user='root', passwd='root', db='db') 

Safe Code : cur = db.cursor() \n cur.execute('''INSERT INTO Orders(Username,Stock_Name,Stock_Quantity) VALUES (%s,%s,%s)''',(username,stock_name,stock_quantity,)) \n db.commit() \n db.close() 

Safe Code : return redirect('/stock_view') 

Safe Code : import xml.etree.ElementTree as ET 

Safe Code : from flask import Flask, request, make_response 

Safe Code : app = Flask(__name__) \n @app.route('/xss') 

Safe Code : import base64 \n import pickle \n from flask import Flask, request 

Safe Code : app = Flask(__name__) \n @app.route('/example') 

Safe Code : def profile(): 

Safe Code : from flask import Flask, redirect \n import re 

Safe Code : app = Flask(__name__) 

Safe Code : @app.route('/some/path/bad') 

Safe Code : def targetRedirection(request): 

Safe Code : from flask import Flask, redirect 

Safe Code : app = Flask(__name__) \n @app.route('/some/path/bad') 

Safe Code : def targetRedirection(request): 

Safe Code : import os 

Safe Code : def deleteImage(request): 

Safe Code : import json \n import urllib.request as request 

Safe Code : def readJSON(url): 

Safe Code : from urllib3 import HTTPResponse 

Safe Code : def getFileData(request): 

Safe Code : import tarfile \n def extract_tar(file_name): 

Safe Code : import subprocess 

Safe Code : def execution_user_input(): 

Safe Code : import os \n def command_execution(request): 

Safe Code : from flask import Flask, request 

Safe Code : from jinja2 import Environment, FileSystemLoader 

Safe Code : app = Flask(__name__) 

Safe Code : @app.route('/renderEnv') 

Safe Code : def render_response_from_env(): 

Safe Code : env = Environment(loader=FileSystemLoader('.')) 

Safe Code : from flask import Flask, request, make_response 

Safe Code : app = Flask(__name__) 

Safe Code : @app.route('\name') 

Safe Code : def name(): 

Safe Code : from flask import request, make_response 

Safe Code : @xss.route('/insecure\n o_template_engine_replace', methods =['GET']) 

Safe Code : def no_template_engine_replace(): 

Safe Code : html = open('templates/xss_shared.html').read() 

Safe Code : from flask import Flask, request, make_response 

Safe Code : app = Flask(__name__) 

Safe Code : @app.route('/renderhtml') 

Safe Code : def renderHTML(): 

Safe Code : from django.db import connection 

Safe Code : def remove_user(username): 

Safe Code : from django.db import connection 

Safe Code : def show_user(request, username): 

Safe Code : cursor = connection.cursor() 

Safe Code : from flask import request, Flask \n import ldap 

Safe Code : @app.route('\normal') 

Safe Code : def normal(): 

Safe Code : ldap_connection = ldap.initialize('ldap://127.0.0.1') 

Safe Code : from flask import request, Flask \n import ldap3 

Safe Code : @app.route('\normal') 

Safe Code : def normal(): 

Safe Code : def eval_code(request): 

Safe Code : import base64 

Safe Code : def code_execution(request): 

Safe Code : from flask import request 

Safe Code : @app.route('/') 

Safe Code : def index(): 

Safe Code : def evalInput(inputStr): 

Safe Code : from flask import request, send_file, Flask 

Safe Code : app = Flask(__name__) \n @app.route('/download') 

Safe Code : def download(): 

Safe Code : from flask import Response, request, Flask 

Safe Code : from werkzeug.datastructures import Headers 

Safe Code : app = Flask(__name__) \n @app.route('/route') 

Safe Code : def route(): 

Safe Code : import django.http 

Safe Code : def route(request): 

Safe Code : def sendReply(request): 

Safe Code : import re 

Safe Code : def filterScriptTags(content): 

Safe Code : import logging 

Safe Code : def inputConversion(): 

Safe Code : from flask import Flask \n from flask import request \n import logging 

Safe Code : logging.basicConfig(level=logging.DEBUG) 

Safe Code : app = Flask(__name__) \n @app.route('/logger') 

Safe Code : def logger(): 

Safe Code : from flask import request, current_app, Flask 

Safe Code : app = Flask(__name__) 

Safe Code : @app.route('/log') 

Safe Code : def log(): 

Safe Code : from Crypto.Cipher import AES 

Safe Code : from Crypto.Util.Padding import pad 

Safe Code : def getEncryptionKey(data, key): 

Safe Code : def isAuthorizedUser(userId): \n pass 

Safe Code : def getUserBankAccount(userId, connection): 

Safe Code : if isAuthorizedUser(userId): 

Safe Code : except Exception as e: \n print(sql) \n raise e 

Safe Code : from flask import Flask \n app = Flask(__name__) 

Safe Code : import traceback 

Safe Code : def do_computation(): 

Safe Code : raise Exception('Secret info') 

Safe Code : @app.route('/bad') 

Safe Code : def server_bad(): 

Safe Code : from flask import Flask \n app = Flask(__name__) 

Safe Code : @app.route('/crash') 

Safe Code : def main(): 

Safe Code : import os 

Safe Code : def makeNewUserDir(username): 

Safe Code : def parse(data): \n if data is None: \n return None \n else: \n return data.split(',') 

Safe Code : def checkAdminPassword(password): 

Safe Code : import mysql.connector 

Safe Code : def getConnection(): 

Safe Code : import os \n from django.http import HttpRequest as request 

Safe Code : def makeNewUserDir(): 

Safe Code : except OSError: \n print('Error: Creating directory. ' + OSError) \n return 'User directory created' 

Safe Code : import os, signal 

Safe Code : from django.shortcuts import render, redirect 

Safe Code : ACCESS_DENIED = False 

Safe Code : def getContent(request): 

Safe Code : if request.method == 'GET': \n ACCESS_DENIED = True 

Safe Code : if request.user.is_authenticated: \n ACCESS_DENIED = False 

Safe Code : if request.user.is_not_authenticated: \n ACCESS_DENIED = True 

Safe Code : if ACCESS_DENIED: \n return redirect('/login/') 

Safe Code : else: \n return render(request, 'content.html') 

Safe Code : libpam = CDLL(find_library('pam')) \n pam_authenticate = libpam.pam_authenticate 

Safe Code : pam_authenticate.restype = c_int 

Safe Code : pam_authenticate.argtypes = [PamHandle, c_int] 

Safe Code : def authenticate(username, password, service='login'): 

Safe Code : def my_conv(n_messages, messages, p_response, app_data): 

Safe Code : handle = PamHandle() 

Safe Code : conv=PamConv(my_conv, 0) \n retval = pam_start(service, username, byref(conv), byref(handle)) \n retval = pam_authenticate(handle, 0) \n return retval == 0 

Safe Code : import ssl 

Safe Code : def getContext(): 

Safe Code : from OpenSSL import SSL 

Safe Code : def getContext(): 

Safe Code : import ssl 

Safe Code : def getCTX(): 

Safe Code : import ssl \n def getCTX(): 

Safe Code : from flask import Flask, make_response, request 

Safe Code : app = Flask('Leak password') 

Safe Code : \n @app.route('/') 

Safe Code : def index(): 

Safe Code : password = request.args.get('password') 

Safe Code : import smtplib 

Safe Code : import ftplib 

Safe Code : import hashlib 

Safe Code : from cryptography.hazmat.primitives.asymmetric import rsa 

Safe Code : def create_key_pair(): 

Safe Code : from Crypto.PublicKey import DSA 

Safe Code : from Crypto.Cipher import DES 

Safe Code : encrypted = cipher.encrypt(message) \n channel.send(encrypted) 

Safe Code : import ssl \n import socket 

Safe Code : def createSSLWrapper(host, port): 

Safe Code : import hashlib 

Safe Code : import hashlib 

Safe Code : from os import urandom 

Safe Code : from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes 

Safe Code : def getEncryptionKey(key): 

Safe Code : import random 

Safe Code : import random \n import string 

Safe Code : import os, random 

Safe Code : import jwt 

Safe Code : import python_jwt as jwt 

Safe Code : import os 

Safe Code : from tempfile import mktemp 

Safe Code : def write_results(results): 

Safe Code : import tempfile 

Safe Code : from django.http import HttpResponse 

Safe Code : def index(request): value = request.GET.get('value') 

Safe Code : def validate_password(actual_pw, typed_pw): if len(actual_pw) != len(typed_pw): \n return 0 

Safe Code : for i in len(actual_pw): \n if actual_pw[i] != typed_pw[i]: \n return 0 \n return 1 

Safe Code : from flask import request, Flask 

Safe Code : import re 

Safe Code : app = Flask(__name__) \n @app.route('/upload') 

Safe Code : import socket 

Safe Code : def UDPMessaging(UDP_IP, UDP_PORT): \n sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) \n sock.bind( (UDP_IP,UDP_PORT) ) 

Safe Code : while True: \n data = sock.recvfrom(1024) 

Safe Code : import time 

Safe Code : def getData(dataStart, dataLimit, thread): 

Safe Code : print('data from A :: '+str(dataStart)+' Accessor thread :: '+thread.threadId) \n time.sleep(0.5) 

Safe Code : from django.http import HttpResponse 

Safe Code : def parse_xml(xml_string): \n root = ET.fromstring(xml_string) \n return root 

Safe Code : def getResource(request): 

Safe Code : target = request.args.get('target') \n regex = re.compile('(www|beta).example.com/') \n if regex.match(target): \n return redirect(target) 

Safe Code : from flask import Flask, request, redirect 

Safe Code : import os 

Safe Code : def killProcess(processID): \n os.kill(processID, signal.SIGKILL) 

Safe Code : app = Flask(__name__) 

Safe Code : @app.route('/pdf/upload') 

Safe Code : def upload_pdf(): 

Safe Code : from flask import Flask, request, redirect 

Safe Code : def dispatchCommand(command, user, args): if command == 'Login': \n loginUser(args) \n return 

Safe Code : def dispatchCommand(command, user, args): if command == 'Retrieve_file': \n if authenticated(user) and ownsFile(user,args): \n sendFile(args) \n return 

Safe Code : def dispatchCommand(command, user, args): if command == 'List_files': \n listFiles(args) \n return 

Safe Code : import base64 

Safe Code : app = Flask(__name__) 

Safe Code : @app.route('/img/upload') 

Safe Code : img_encoded = base64.b64encode(img_data) \n with open('./pictures/' + img_name, 'wb') as f: \n f.write(img_encoded) 

Safe Code : HAS_ADMIN_ACCESS = False 

Safe Code : def admin_access(request): global HAS_ADMIN_ACCESS \n user_name = request.POST.get('user_name') \n password = request.POST.get('password') 

Safe Code : return HAS_ADMIN_ACCESS 

Safe Code : import time 

Safe Code : import time \n import threading 

Safe Code : class CWE_488: 

Safe Code : def __init__(self): 

Safe Code : self.dataStart = 0 \n self.dataLimit = 100 

Safe Code : self.thread = threading.currentThread() 

Safe Code : def getData(self): 

Safe Code : def __init__(self): \n if self.dataStart <= self.dataLimit: \n self.dataStart+=1 

Safe Code : print('data from A :: '+str(self.dataStart)+' Accessor thread :: '+self.thread.threadId) \n time.sleep(0.5) 

Safe Code : import pickle 

Safe Code : class Payload(object): 

Safe Code : from django.conf.urls import url \n import pickle 

Safe Code : import _pickle as cPickle \n import base64 

Safe Code : if not check_hmac(token['signature'], token['data'], getSecretKey()): \n raise AuthFail \n secure_data = token['data'] \n return secure_data \n except: \n raise AuthFail 

Safe Code : from flask import request \n import yaml 

Safe Code : app = Flask(__name__) \n @app.route('/yaml') 

Safe Code : from flask import Flask, make_response, request 

Safe Code : app = Flask('dummy') 

Safe Code : def configure_app(app): app.config['SQLALCHEMY_DATABASE_URI'] = 'postgresql://user:@domain.com\ 

Safe Code : import base64 \n import MySQLdb 

Safe Code : def checkPassword(userid, password): 

Safe Code : cursor.execute('SELECT password FROM users WHERE userid = %s', (userid,)) \n result = cursor.fetchone() 

Safe Code : if result is None: \n return False \n else: \n return base64.b64decode(result[0]) == password 

Safe Code : from flask import Flask, request \n import MySQLdb \n import hashlib 

Safe Code : app = Flask(__name__) 

Safe Code : @app.route('/register', methods=['POST']) 

Safe Code : def register(): username = request.form['username'] \n password = request.form['password'] 

Safe Code : if cursor.fetchone() is not None: \n return 'Username already exists\ 

Safe Code : cursor.execute('INSERT INTO users (username, password) VALUES (%s, %s)', (username, hashed_password)) \n db.commit() \n return 'Registered successfully\ 

Safe Code : def isEqual(account1, account2): if account1 is account2: \n return True \n else: \n return False 

Safe Code : from flask import Flask, request, redirect 

Safe Code : app = Flask(__name__) \n @app.route('/') 

Safe Code : from django.http import HttpResponseRedirect 

Safe Code : from flask import request, redirect, Flask 

Safe Code : app = Flask(__name__) \n @app.route('flask_redirect') 

Safe Code : from flask import request, Response, Flask 

Safe Code : app = Flask(__name__) \n @app.route('set_location_header') 

Safe Code : from django.http import HttpResponseRedirect, HttpResponse 

Safe Code : from socket import socket 

Safe Code : while True: \n data = conn.recv(1024) \n if not data: \n break \n conn.send(data) \n conn.close() 

Safe Code : from flask import Flask, request \n import lxml.etree 

Safe Code : app = Flask(__name__) 

Safe Code : def checkPassword(userid, password): \n pass 

Safe Code : @app.post('/upload') 

Safe Code : userid = root.find('userid').text \n password = root.find('password').text 

Safe Code : if checkPassword(userid, password): \n return 'OK' \n else: \n return 'ERROR\ 

Safe Code : from flask import Flask, request \n import lxml.etree 

Safe Code : app = Flask(__name__) \n @app.post('/upload') 

Safe Code : from lxml import etree 

Safe Code : from lxml import etree 

Safe Code : rootxsd = treexsd.getroot() \n schema = etree.XMLSchema(rootxsd) \n return schema 

Safe Code : from lxml import etree 

Safe Code : def transform_xml(): 

Safe Code : tree = etree.parse('ressources/xxe.xml', parser) \n rootxsl = tree.getroot() 

Safe Code : import xml.sax 

Safe Code : def get_root(): 

Safe Code : myHandler = MyHandler() \n parser.setContentHandler(myHandler) 

Safe Code : from flask import request, send_file, Flask 

Safe Code : app = Flask(__name__) \n @app.route('/download') 

Safe Code : def download(): 

Safe Code : from lxml import etree 

Safe Code : from io import StringIO 

Safe Code : from django.http import HttpResponse 

Safe Code : def a(request): value = request.GET['xpath'] 

Safe Code : f = StringIO('<foo><bar></bar></foo>') 

Safe Code : tree = etree.parse(f) 

Safe Code : from flask import request 

Safe Code : @app.route('/user') 

Safe Code : def user_location(): 

Safe Code : elmts = root.findall(query) \n return 'Location %s' % list(elmts) 

Safe Code : import re 

Safe Code : from flask import request \n import re 

Safe Code : @app.route('/direct') 

Safe Code : from flask import request 

Safe Code : import re 

Safe Code : @app.route('/direct') 

Safe Code : def direct(): 

Safe Code : import os 

Safe Code : import hashlib 

Safe Code : hashedPassword = hasher.digest() \n return updateUserLogin(userName,hashedPassword) 

Safe Code : from hashlib import pbkdf2_hmac 

Safe Code : from flask import Flask, request 

Safe Code : import xml.etree.ElementTree as ET 

Safe Code : app = Flask(__name__) 

Safe Code : @app.post('/upload') 

Safe Code : import mysql.connector 

Safe Code : from django.http import HttpResponse 

Safe Code : from django.shortcuts import redirect 

Safe Code : def process_request(request): 

Safe Code : password = request.GET['password'] 

Safe Code : from lxml import etree 

Safe Code : def getRoot(): 

Safe Code : def dispatchCommand(command, user, args): 

Safe Code : import requests \n from flask import Flask, request 

Safe Code : app = Flask(__name__) 

Safe Code : @app.route('/full_ssrf') 

Safe Code : def full_ssrf(): 

Safe Code : import requests \n from flask import Flask, request 

Safe Code : app = Flask(__name__) 

Safe Code : @app.route('/partial_ssrf') 

Safe Code : def partial_ssrf(): 

Safe Code : import socket 

Safe Code : def sendData(): sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) \n sock.bind( (UDP_IP,UDP_PORT) ) 

Safe Code : while true: \n data = sock.recvfrom(1024) \n if not data: \n break 

Safe Code : import boto3 

Safe Code : DYNAMO_CLIENT = boto3.client('dynamodb', config=config) 

Safe Code : record = resolveName(nameToResolve) \n sendResponse(requestIP,record) 





======>    DATASET SIZE   <======

#DimTestSet: 477 



======>    FINAL RESULTS REMEDIATION   <======

#DetectedVuln: 0 

#Remediated: 0 

#NotRemediated: 0 

Remediated Rate: 0 % 

Not Remediated Rate: 0 % 



======>    EXECUTION TIME   <======

Runtime: 56.64666271209717 s 

Runtime per snippet: 0.118756 s 

